@inherits ComponenteNoDataCore<Loading>

@if (IsLoading)
{
    <Alert Color="Color.Warning" Visible="true">
        <AlertDescription>
            <Blazorise.Icon Class="spinner-border spinner-border-sm"></Blazorise.Icon> @GlobalTranslations.CustomVisibilityLoading
        </AlertDescription>
    </Alert>
}
else if (IsInvalid)
{
    <Alert Color="Color.Danger" Visible="true">
        <AlertDescription>
            <Blazorise.Icon Name="FontAwesomeIcons.Bug"></Blazorise.Icon> @(CustomInvalid ?? @GlobalTranslations.CustomVisibilityInvalid)
        </AlertDescription>
    </Alert>
}
else if (UnauthenticatedUser.HasValue && UnauthenticatedUser.Value)
{
    <Alert Color="Color.Primary" Visible="true">
        <AlertDescription>
            <Blazorise.Icon Name="FontAwesomeIcons.UserLock"></Blazorise.Icon> @GlobalTranslations.UnauthenticatedUser
        </AlertDescription>
    </Alert>
}
else if (IsEmptyFilter.HasValue ? IsEmptyFilter.Value : IsEmpty)
{
    <Alert Color="Color.Primary" Visible="true">
        <AlertDescription>
            <Blazorise.Icon Name="FontAwesomeIcons.ExclamationTriangle"></Blazorise.Icon> @(CustomNoData ?? @GlobalTranslations.CustomVisibilityNoData)
        </AlertDescription>
    </Alert>
}
else
{
    @ChildContent
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public string? CustomInvalid { get; set; } = null;
    [Parameter] public string? CustomNoData { get; set; } = null;
    [Parameter] public bool? IsEmptyFilter { get; set; }
    [Parameter] public bool? UnauthenticatedUser { get; set; }

    public bool IsLoading { get; set; }
    public bool IsInvalid { get; set; }
    public bool IsEmpty { get; set; } = true;

    private void Reset()
    {
        IsLoading = false;
        IsInvalid = false;
        IsEmpty = true;
        UnauthenticatedUser = false;
    }

    public void Start()
    {
        Reset();

        IsLoading = true;
        StateHasChanged();
    }

    public void Finish(bool isEmpty, string? customNoData = null)
    {
        Reset();

        IsLoading = false;
        IsEmpty = isEmpty;
        IsEmptyFilter = isEmpty; //parameters are executed before LoadData, so this property can contain a wrong value
        if (isEmpty) CustomNoData = customNoData;
        StateHasChanged();
    }

    public void Invalid()
    {
        Reset();

        IsInvalid = true;
        StateHasChanged();
    }
}