@inherits BaseCustomField<DateTime?, Birthdate>

<div class="d-flex" style="align-items: center;">
    <MudIcon Icon="@CssIcon" Class="me-3"></MudIcon>
    <MudSelect Label="Year" Value="@year" ValueChanged="(int value) => SetYear(value)" AdornmentColor="Color.Primary"
               Required="@Required" Placeholder="@For?.GetCustomAttribute()?.Placeholder" FullWidth="true" Class="me-3">
        @foreach (var item in years)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    <MudSelect Label="Month" Value="@month" ValueChanged="(int value) => SetMonth(value)" AdornmentColor="Color.Primary"
               Required="@Required" Placeholder="@For?.GetCustomAttribute()?.Placeholder" FullWidth="true" Class="me-3">
        @foreach (var item in months)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    <MudSelect Label="Day" Value="@day" ValueChanged="(int value) => SetDay(value)" AdornmentColor="Color.Primary"
               Required="@Required" Placeholder="@For?.GetCustomAttribute()?.Placeholder" FullWidth="true" Class="me-3">
        @foreach (var item in days)
        {
            <MudSelectItem Value="@item">@item</MudSelectItem>
        }
    </MudSelect>
    <MudTextField T="string" Label="Age" Text="@($"{Value.GetAge()} {GlobalTranslations.Years}")"
                  Disabled="true" FullWidth="true"></MudTextField>
</div>
<MudText Typo="Typo.caption" Style="margin-left: calc(1.5rem + 12px)">
    @GlobalTranslations.BirthdateTip
</MudText>

@code {
    [Parameter] public DateTime? Value { get; set; }
    [Parameter] public EventCallback<DateTime?> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; }

    private int year = DateTime.Now.Year;
    private int month = DateTime.Now.Month;
    private int day = DateTime.Now.Day;

    private int[] years => Enumerable.Range(DateTime.Now.AddYears(-100).Year, 100).OrderDescending().ToArray();
    private int[] months => Enumerable.Range(1, 12).ToArray();
    private int[] days => Enumerable.Range(1, DateTime.DaysInMonth(year, month)).ToArray();

    protected override void OnInitialized()
    {
        Value ??= DateTime.Today;

        year = Value.Value.Year;
        month = Value.Value.Month;
        day = Value.Value.Day;
    }

    private async Task SetYear(int value)
    {
        year = value;
        await SetValue();
    }

    private async Task SetMonth(int value)
    {
        month = value;
        await SetValue();
    }

    private async Task SetDay(int value)
    {
        day = value;
        await SetValue();
    }

    private async Task SetValue()
    {
        try
        {
            var date = DateTime.Today;

            if (year != default && month != default && day != default)
            {
                date = new DateTime(year, month, day);
            }

            Value = date;
            await ValueChanged.InvokeAsync(Value);
        }
        catch (Exception)
        {
            await ShowError("An error occurred while processing the date");
        }
    }

}