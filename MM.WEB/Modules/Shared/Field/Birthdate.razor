@inherits BaseCustomField<DateTime, Birthdate>

<Field Horizontal="true">
    <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.BirthdayCake"></Blazorise.Icon> @Label
        @if (Required)
        {
            <div style="color: red; display: initial;"> *</div>
        }
    </FieldLabel>
    <FieldBody ColumnSize="ColumnSize.IsFull.OnWidescreen.Is8.OnFullHD">
        <Addons>
            <Addon AddonType="AddonType.Body">
                <Select SelectedValue="@year" SelectedValueChanged="(int value)=>SetYear(value)" Class="form-control">
                    @foreach (var item in years)
                    {
                        <SelectItem Value="@item">@item</SelectItem>
                    }
                </Select>
                <Select SelectedValue="@month" SelectedValueChanged="(int value)=>SetMonth(value)" Class="form-control">
                    @foreach (var item in months)
                    {
                        <SelectItem Value="@item">@(new DateTime(year, item, 1).ToString("MMM"))</SelectItem>
                    }
                </Select>
                <Select SelectedValue="@day" SelectedValueChanged="(int value)=>SetDay(value)" Class="form-control">
                    @foreach (var item in days)
                    {
                        <SelectItem Value="@item">@item</SelectItem>
                    }
                </Select>
            </Addon>
        </Addons>
        <ValidationMessage For="@For"></ValidationMessage>
    </FieldBody>
    <Column ColumnSize="ColumnSize.IsFull">
        <FieldHelp Style="color: #17a2b8 !important">@Resources.GlobalTranslations.BirthdateTip</FieldHelp>
    </Column>
</Field>

@code {
    [Parameter] public DateTime Value { get; set; }
    [Parameter] public EventCallback<DateTime> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; }

    private int year = DateTime.Now.Year;
    private int month = DateTime.Now.Month;
    private int day = DateTime.Now.Day;

    private int[] years => Enumerable.Range(DateTime.Now.AddYears(-100).Year, 100).OrderDescending().ToArray();
    private int[] months => Enumerable.Range(1, 12).ToArray();
    private int[] days => Enumerable.Range(1, DateTime.DaysInMonth(year, month)).ToArray();

    protected override void OnInitialized()
    {
        year = Value.Year;
        month = Value.Month;
        day = Value.Day;
    }

    private async Task SetYear(int value)
    {
        year = value;
        await SetValue();
    }

    private async Task SetMonth(int value)
    {
        month = value;
        await SetValue();
    }

    private async Task SetDay(int value)
    {
        day = value;
        await SetValue();
    }

    private async Task SetValue()
    {
        try
        {
            var date = DateTime.Today;

            if (year != default && month != default && day != default)
            {
                date = new DateTime(year, month, day);
            }

            Value = date;
            await ValueChanged.InvokeAsync(Value);
        }
        catch (Exception)
        {
            await Toast.Error("Ocorreu um erro ao processar a data");
        }
    }
}