@using MM.Shared.Models.Profile
@using MM.WEB.Core.Enum
@using MM.WEB.Core.Models
@typeparam TValue

@inject IDialogService DialogService

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudTabs Border="true" Outlined="true" PanelClass="pt-2" MinimumTabWidth="100px">
            <MudTabPanel Tag="@("Affinity")" Text="@GlobalTranslations.Compatibility">
                <MudGrid Spacing="2">
                    <MudItem xs="6">
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Dense="true" Class="my-2">
                            @GlobalTranslations.YourProfile
                        </MudAlert>
                        @if (PreferenceValues.Any())
                        {
                            @foreach (var item in PreferenceValues)
                            {
                                <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                    @item
                                </MudChip>
                            }
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                @GlobalTranslations.NotAnswered
                            </MudChip>
                        }
                    </MudItem>
                    <MudItem xs="6">
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Dense="true" Class="my-2">
                            @GlobalTranslations.ExpectedCompatibility
                        </MudAlert>
                        @if (ExpectedValues.Any())
                        {
                            if (Type == CompatibilityType.Range)
                            {
                                <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                    @ExpectedValues.First()
                                </MudChip>
                                <MudText Inline="true"> - </MudText>
                                <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                    @ExpectedValues.Last()
                                </MudChip>
                            }
                            else
                            {
                                foreach (var item in ExpectedValues)
                                {

                                    <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                        @item
                                    </MudChip>
                                }
                            }
                        }
                        else
                        {
                            <MudChip T="string" Color="Color.Default" Variant="Variant.Outlined">
                                @GlobalTranslations.Undefined
                            </MudChip>
                        }
                    </MudItem>
                </MudGrid>
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Dense="true" Class="my-2">
                    @GlobalTranslations.YourPartnerProfile
                </MudAlert>
                @if (ViewValues.Any())
                {
                    foreach (var item in ViewValues)
                    {
                        if (item is Enum resultE)
                        {
                            var desc = resultE.GetCustomAttribute()?.Description;
                            var show = resultE.GetCustomAttribute()?.ShowDescription ?? false;
                            var name = resultE.GetName();

                            if (desc.NotEmpty() && show)
                            {
                                <MudAlert Severity="@GetSeverity(item)" Variant="Variant.Outlined" Dense="true" Class="mb-2" Style="text-align: justify;">
                                    <span class="me-2" style="font-weight: bold;">@name</span>@desc
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="@GetSeverity(item)" Variant="Variant.Outlined" Dense="true" Class="mb-2" Style="text-align: justify;">
                                    @name
                                </MudAlert>
                            }
                        }
                        else if (item != null)
                        {
                            <MudAlert Severity="@GetSeverity(item)" Variant="Variant.Outlined" Dense="true" Class="mb-2" Style="text-align: justify;">
                                @item
                            </MudAlert>
                        }
                        else
                        {
                            <MudAlert Severity="@GetSeverity(item)" Variant="Variant.Outlined" Dense="true" Class="mb-2" Style="text-align: justify;">
                                @GlobalTranslations.NotAnswered
                            </MudAlert>
                        }
                    }
                }
                else
                {
                    <MudAlert Severity="@GetSeverity()" Variant="Variant.Outlined" Dense="true" Class="mb-2" Style="text-align: justify;">
                        @GlobalTranslations.NotAnswered
                    </MudAlert>
                }
            </MudTabPanel>
            <MudTabPanel Tag="@("WhyImportant")" Text="@GlobalTranslations.WhyImportant" Disabled="WhyImportant.Empty()">
                <MudText Class="my-2" Typo="Typo.body1" Align="Align.Justify">
                    @WhyImportant
                </MudText>
            </MudTabPanel>
            <MudTabPanel Tag="@("Tips")" Text="@GlobalTranslations.Tips" Disabled="GetTips().Empty()">
                <MudList T="string" Dense="true">
                    @foreach (var item in GetTips())
                    {
                        <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                            <span class="me-2" style="font-weight: bold;">@item.Key</span><span>@item.Value</span>
                        </MudListItem>
                    }
                </MudList>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="@(() => { DialogService?.ShowMessageBox("Feedback", GlobalTranslations.CompatibilityDeveloping); })">@Button.Feedback</MudButton>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public IEnumerable<string> PreferenceValues { get; set; } = [];
    [Parameter] public IEnumerable<string> ExpectedValues { get; set; } = [];
    [Parameter] public IEnumerable<TValue> ViewValues { get; set; } = [];
    [Parameter] public IEnumerable<AffinityVM> Affinities { get; set; } = [];

    [Parameter] public CompatibilityType Type { get; set; }
    [Parameter] public CompatibilityItem Item { get; set; }
    [Parameter] public ProfileModel? Profile { get; set; }
    [Parameter] public FilterModel? Filter { get; set; }
    [Parameter] public string? WhyImportant { get; set; }
    [Parameter] public string? Tips { get; set; }

    private Severity GetSeverity(TValue? value = default)
    {
        if (!Affinities.Any(s => s.Item == Item)) //if the attribute is not mapped to affinity, it remains neutral
        {
            return Severity.Normal;
        }

        if (Affinities.Single(s => s.Item == Item).HaveAffinity) //if it is mapped and has affinity
        {
            if (value == null)
            {
                return Severity.Success;
            }

            if (value is Enum result && Type == CompatibilityType.Enum)
            {
                if (!ExpectedValues.Any() || ExpectedValues.Contains(result.GetName()!))
                    return Severity.Success;
                return Severity.Warning;
            }

            return Severity.Success;
        }

        //if mapped but without affinity
        return Severity.Error;
    }

    private Dictionary<string, string> GetTips()
    {
        if (string.IsNullOrEmpty(Tips)) return new Dictionary<string, string>();

        var values = Tips.Split("|");
        var result = new Dictionary<string, string>();
        for (var i = 0; i < values.Length; i += 2)
        {
            result.Add(values[i], values[i + 1]);
        }

        return result;
    }

}