@using MM.Shared.Models.Profile
@using MM.WEB.Core.Enum
@using MM.WEB.Core.Models
@typeparam TValue

<Tabs RenderMode="TabsRenderMode.LazyReload" @bind-SelectedTab="@Tab">
    <Items>
        <Tab Name="Affinity">
            @GlobalTranslations.Compatibility
        </Tab>
        <Tab Name="WhyImportant" Disabled="WhyImportant.Empty()">
            @GlobalTranslations.WhyImportant
        </Tab>
        <Tab Name="Tips" Disabled="GetTips().Empty()">
            @GlobalTranslations.Tips
        </Tab>
    </Items>
    <Content>
        <TabPanel Name="Affinity" Padding="Padding.Is3.FromTop">
            <Row HorizontalGutter="8" VerticalGutter="0">
                <Column>
                    <Alert Visible="true" Color="Color.Primary" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromBottom">
                        <AlertMessage>@GlobalTranslations.YourProfile</AlertMessage>
                    </Alert>
                    @if (PreferenceValues.Any())
                    {
                        @foreach (var item in PreferenceValues)
                        {
                            <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">
                                @item
                            </Badge>
                        }
                    }
                    else
                    {
                        <Badge Color="Color.Secondary">
                            @GlobalTranslations.NotAnswered
                        </Badge>
                    }
                </Column>
                <Column>
                    <Alert Visible="true" Color="Color.Primary" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromBottom">
                        <AlertMessage>@GlobalTranslations.ExpectedCompatibility</AlertMessage>
                    </Alert>
                    @if (ExpectedValues.Any())
                    {
                        if (Type == CompatibilityType.Range)
                        {
                            <Badge Color="Color.Secondary">@ExpectedValues.First()</Badge>

                            <Blazorise.Text> - </Blazorise.Text>

                            <Badge Color="Color.Secondary">@ExpectedValues.Last()</Badge>
                        }
                        else
                        {
                            foreach (var item in ExpectedValues)
                            {
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">@item</Badge>
                            }
                        }
                    }
                    else
                    {
                        <Badge Color="Color.Secondary">
                            @GlobalTranslations.Undefined
                        </Badge>
                    }
                </Column>
            </Row>
            <Alert Visible="true" Color="Color.Primary" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom">
                <AlertMessage>@GlobalTranslations.YourPartnerProfile</AlertMessage>
            </Alert>
            @if (ViewValues.Any())
            {
                foreach (var item in ViewValues)
                {
                    if (item is Enum resultE)
                    {
                        var desc = resultE.GetCustomAttribute()?.Description;
                        var name = resultE.GetName();

                        if (string.IsNullOrEmpty(desc))
                        {
                            <Alert Visible="true" Color="@GetColor(item)" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromTop.Is1.FromBottom.Is2.FromEnd" Style="display: inline-block">
                                <AlertMessage>@name</AlertMessage>
                            </Alert>
                        }
                        else
                        {
                            <Alert Visible="true" Color="@GetColor(item)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom">
                                <AlertMessage>@name</AlertMessage>
                                <AlertDescription>@desc</AlertDescription>
                            </Alert>
                        }
                    }
                    else if (item != null)
                    {
                        <Alert Visible="true" Color="@GetColor(item)" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromTop.Is1.FromBottom" Style="display: inline-block">
                            <AlertMessage>@item</AlertMessage>
                        </Alert>
                    }
                    else
                    {
                        <Alert Visible="true" Color="@GetColor(item)" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromTop.Is1.FromBottom" Style="display: inline-block">
                            <AlertMessage>@GlobalTranslations.NotAnswered</AlertMessage>
                        </Alert>
                    }
                }
            }
            else
            {
                <Alert Visible="true" Color="@GetColor()" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromTop.Is1.FromBottom" Style="display: inline-block">
                    <AlertMessage>@GlobalTranslations.NotAnswered</AlertMessage>
                </Alert>
            }
        </TabPanel>
        <TabPanel Name="WhyImportant" Padding="Padding.Is3.FromTop">
            <Alert Visible="true" Color="Color.Light" Padding="Padding.Is0.OnY" Margin="Margin.Is1.FromTop.Is1.FromBottom">
                <AlertDescription>@WhyImportant</AlertDescription>
            </Alert>
        </TabPanel>
        <TabPanel Name="Tips" Padding="Padding.Is3.FromTop">
            @foreach (var item in GetTips())
            {
                <Alert Visible="true" Color="Color.Light" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom">
                    <AlertMessage>@item.Key</AlertMessage>
                    <AlertDescription>@item.Value</AlertDescription>
                </Alert>
            }
        </TabPanel>
    </Content>
</Tabs>

@code {
    [Parameter] public IEnumerable<string> PreferenceValues { get; set; } = [];
    [Parameter] public IEnumerable<string> ExpectedValues { get; set; } = [];
    [Parameter] public IEnumerable<TValue> ViewValues { get; set; } = [];
    [Parameter] public IEnumerable<AffinityVM> Affinities { get; set; } = [];

    [Parameter] public CompatibilityType Type { get; set; }
    [Parameter] public CompatibilityItem Item { get; set; }
    [Parameter] public ProfileModel? Profile { get; set; }
    [Parameter] public FilterModel? Filter { get; set; }
    [Parameter] public string? WhyImportant { get; set; }
    [Parameter] public string? Tips { get; set; }

    public string? Tab { get; set; } = "Affinity";

    private enum Tabs
    {
        Affinity,
        WhyImportant,
        Tips
    }

    private Color GetColor(TValue? value = default)
    {
        if (!Affinities.Any(s => s.Item == Item)) //if the attribute is not mapped to affinity, it remains neutral
        {
            return Color.Secondary;
        }

        if (Affinities.Single(s => s.Item == Item).HaveAffinity) //if it is mapped and has affinity
        {
            if (value == null)
            {
                return Color.Success;
            }

            if (value is Enum result && Type == CompatibilityType.Enum)
            {
                if (!ExpectedValues.Any() || ExpectedValues.Contains(result.GetName()!))
                    return Color.Success;
                return Color.Warning;
            }

            return Color.Success;
        }

        //if mapped but without affinity
        return Color.Danger;
    }

    private Dictionary<string, string> GetTips()
    {
        if (string.IsNullOrEmpty(Tips)) return new Dictionary<string, string>();

        var values = Tips.Split("|");
        var result = new Dictionary<string, string>();
        for (var i = 0; i < values.Length; i += 2)
        {
            result.Add(values[i], values[i + 1]);
        }

        return result;
    }

}