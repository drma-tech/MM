@page "/"
@page "/index"

@inject IJSRuntime JsRuntime

<CardDeck Margin="Margin.Is3.FromBottom">
    <Card>
        <CardBody>
            <CardTitle Size="5" Margin="Margin.Is0.FromBottom">
                Countries <Badge Color="Color.Primary" Float="Float.End">0</Badge>
            </CardTitle>
        </CardBody>
    </Card>
    <Card>
        <CardBody>
            <CardTitle Size="5" Margin="Margin.Is0.FromBottom">
                Cities <Badge Color="Color.Primary" Float="Float.End">0</Badge>
            </CardTitle>
        </CardBody>
    </Card>
    <Card>
        <CardBody>
            <CardTitle Size="5" Margin="Margin.Is0.FromBottom">
                Users <Badge Color="Color.Primary" Float="Float.End">0</Badge>
            </CardTitle>
        </CardBody>
    </Card>
    <Card>
        <CardBody>
            <CardTitle Size="5" Margin="Margin.Is0.FromBottom">
                Couples <Badge Color="Color.Primary" Float="Float.End">0</Badge>
            </CardTitle>
        </CardBody>
    </Card>
</CardDeck>

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="Highlights">
</HeaderComponent>
<Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
    @foreach (var item in Highlights)
    {
        <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
        </Column>
    }
</Row>

<HeaderComponent IconName="@FontAwesomeIcons.ThumbsUp" Title="Suggestions">
</HeaderComponent>
<Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
    @foreach (var item in Suggestions)
    {
        <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
        </Column>
    }
</Row>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleExclamation" Title="Likes">
        </HeaderComponent>
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
            @foreach (var item in Likes)
            {
                <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                </Column>
            }
        </Row>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleCheck" Title="Matches">
        </HeaderComponent>
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
            @foreach (var item in Matches)
            {
                <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                </Column>
            }
        </Row>
    </Column>
</Row>

@code {
    [Parameter][SupplyParameterFromQuery(Name = "language")] public string? language { get; set; }
    [Parameter][SupplyParameterFromQuery(Name = "platform")] public string? platform { get; set; }

    public List<string> Highlights { get; set; } = [];
    public List<string> Suggestions { get; set; } = [];
    public List<string> Likes { get; set; } = [];
    public List<string> Matches { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (platform.NotEmpty())
        {
            await JsRuntime.InvokeAsync<string>("SetLocalStorage", "platform", platform);
        }
        else
        {
            await JsRuntime.InvokeAsync<string>("TryDetectPlatform");
        }
    }
}
