@using MM.Shared.Models.Auth
@using MM.Shared.Models.Profile;
@using MM.WEB.Core.Models
@using MM.WEB.Modules.Profile.Core;
@inherits ComponentCore<PopupProfile>
@attribute [Authorize]

@inject ProfileApi ProfileApi
@inject FilterApi FilterApi
@inject InteractionApi InteractionApi
@inject IJSRuntime JsRuntime

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Profile</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody MaxHeight="70">
            <RenderControl Core="Core" Model="view" ExpressionEmpty="((ProfileModel? obj) => obj == null)" PrivateContent="true">
                <Row HorizontalGutter="8" VerticalGutter="0">
                    <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is4.OnWidescreen">
                        <Card Margin="Margin.Is2.FromBottom">
                            <CardBody Padding="Padding.Is0">
                                @{
                                    int totPercAff = affinities.GetPercentAffinity(null);
                                }
                                <Badge Color="GetColor(totPercAff)" Style="position: absolute; top: 10px; left: 10px; z-index: 2;">@(totPercAff + "%")</Badge>
                                <Badge Color="Color.Dark" Style="position: absolute; top: 10px; right: 10px; z-index: 2;">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Camera"></Blazorise.Icon> @imageDataUriGallery.Count()
                                </Badge>
                                <div id="@GallerySwiperId" class="swiper">
                                    <div class="swiper-wrapper">
                                        @foreach (var item in imageDataUriGallery)
                                        {
                                            <div class="swiper-slide">
                                                <Image Source="@item" Style="max-height: 450px !important; width: 100%" />
                                            </div>
                                        }
                                    </div>
                                    <div class="swiper-pagination"></div>
                                    <div class="swiper-button-next"></div>
                                    <div class="swiper-button-prev"></div>
                                </div>
                            </CardBody>
                            <CardBody>
                                <Badge Color="Color.Secondary">
                                    @view?.NickName
                                </Badge>
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt"></Blazorise.Icon> @view?.GetLocation(ProfileModel.LocationType.City)
                                </Badge>
                                @* @if (view.ActivityStatus == ActivityStatus.Today)
                                {
                                <Badge Color="Color.Success">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado hoje
                                </Badge>
                                }
                                else if (view.ActivityStatus == ActivityStatus.Week)
                                {
                                <Badge Color="Color.Warning">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado esta semana
                                </Badge>
                                }
                                else if (view.ActivityStatus == ActivityStatus.Month)
                                {
                                <Badge Color="Color.Danger">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado este mês
                                </Badge>
                                }
                                else
                                {
                                <Badge Color="Color.Dark">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> usuário desativado
                                </Badge>
                                } *@
                                @* @if (view.Reports.Any())
                                {
                                <Paragraph Margin="Margin.Is0.FromTop.Is0.FromBottom">
                                @foreach (var item in view.Reports)
                                {
                                <Badge Color="Color.Warning" Style="cursor: help;">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> @item.Type.GetName()
                                </Badge>
                                }
                                </Paragraph>
                                }*@
                                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromTop.Is0.FromBottom">
                                    @view?.Description
                                </Paragraph>
                            </CardBody>
                            <CardBody>
                                <Row HorizontalGutter="8" VerticalGutter="0">
                                    <Column ColumnSize="ColumnSize.IsHalf">
                                        @if (interaction?.Status == InteractionStatus.Explorer)
                                        {
                                            <DrmaButton Color="Color.Primary" Clicked="Like" Block="true" Margin="Margin.Is2.FromBottom"
                                                        Disabled="ButtonDisabled(EventType.Like)" Core="CoreEvent">
                                                <Blazorise.Icon Name="FontAwesomeIcons.ThumbsUp"></Blazorise.Icon> @WEB.Resources.Button.Like
                                            </DrmaButton>
                                            <DrmaButton Color="Color.Primary" Clicked="Like" Block="true" Margin="Margin.Is2.FromBottom"
                                                        Disabled="ButtonDisabled(EventType.Dislike)" Core="CoreEvent">
                                                <Blazorise.Icon Name="FontAwesomeIcons.ThumbsDown"></Blazorise.Icon> @WEB.Resources.Button.Dislike
                                            </DrmaButton>
                                        }
                                        @if (interaction?.Status == InteractionStatus.Match || interaction?.Status == InteractionStatus.Dating)
                                        {
                                            <Button Color="Color.Primary" Clicked="GoChat" Block="true" Margin="Margin.Is2.FromBottom"
                                                    Disabled="true">
                                                <Blazorise.Icon Name="FontAwesomeIcons.Comments"></Blazorise.Icon> @WEB.Resources.Button.Chat
                                            </Button>
                                        }
                                        @if (interaction?.Status == InteractionStatus.Match)
                                        {
                                            <Button Color="Color.Primary" Clicked="GoChat" Block="true" Margin="Margin.Is2.FromBottom"
                                                    Disabled="ButtonDisabled(EventType.Dating)">
                                                <Blazorise.Icon Name="FontAwesomeIcons.FaceKissWinkHeart"></Blazorise.Icon> @WEB.Resources.Button.Dating
                                            </Button>
                                        }
                                        @if (interaction?.Status == InteractionStatus.Dating)
                                        {
                                            <Button Color="Color.Primary" Clicked="GoChat" Block="true" Margin="Margin.Is2.FromBottom"
                                                    Disabled="ButtonDisabled(EventType.Relationship)">
                                                <Blazorise.Icon Name="FontAwesomeIcons.FaceGrinHearts"></Blazorise.Icon> @WEB.Resources.Button.Relationship
                                            </Button>
                                        }
                                        @if (interaction?.Status == InteractionStatus.Dating || interaction?.Status == InteractionStatus.Relationship)
                                        {
                                            <Button Color="Color.Primary" Clicked="GoChat" Block="true" Margin="Margin.Is2.FromBottom"
                                                    Disabled="ButtonDisabled(EventType.Feedback)">
                                                <Blazorise.Icon Name="FontAwesomeIcons.CommentDots"></Blazorise.Icon> @WEB.Resources.Button.Feedback
                                            </Button>
                                        }
                                    </Column>
                                    <Column ColumnSize="ColumnSize.IsHalf">
                                        <Button Color="Color.Danger" Clicked="report!.ShowModal" Block="true" Margin="Margin.Is2.FromBottom" Disabled="true || Fake">
                                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash"></Blazorise.Icon> @WEB.Resources.Button.Delete
                                        </Button>
                                        <Button Color="Color.Danger" Clicked="report!.ShowModal" Block="true" Margin="Margin.Is2.FromBottom" Disabled="true || Fake">
                                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Flag"></Blazorise.Icon> @WEB.Resources.Button.Report
                                        </Button>
                                    </Column>
                                </Row>
                            </CardBody>
                        </Card>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is8.OnWidescreen">
                        <CardCompatibility User="user" Filter="filter" View="view" Affinities="affinities"></CardCompatibility>
                    </Column>
                </Row>
                <ProfileReport @ref="report"></ProfileReport>
            </RenderControl>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@modal!.Hide">Fechar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter][EditorRequired] public string? UserId { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public Action? Liked { get; set; }
    [Parameter] public Action? Disliked { get; set; }
    [Parameter] public Action? Matched { get; set; }

    public Origin Origin { get; set; }
    private Modal? modal;

    public string? IdUserView { get; set; }
    public bool Fake { get; set; }

    private ClientePrincipal? principal;
    private ProfileModel? user;
    private FilterModel? filter;
    private ProfileModel? view;
    public RenderControlCore<ProfileModel?>? Core { get; set; } = new();

    private List<AffinityVM> affinities = [];
    private InteractionModel? interaction;
    public RenderControlCore<InteractionModel?>? CoreEvent { get; set; } = new();

    private readonly string GallerySwiperId = $"swiper-{Guid.NewGuid()}";
    string[] imageDataUriGallery = [];

    private ProfileReport? report;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("initCalendar", GallerySwiperId);

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task LoadDataRender()
    {
        try
        {
            if (string.IsNullOrEmpty(IdUserView)) return;

            Core?.LoadingStarted?.Invoke();

            if (IdUserView == UserId)
            {
                Core?.ShowError("Something wrong happened.");
                return;
            }

            if (!Fake) interaction = await InteractionApi.GetInteraction(IdUserView.ToString(), null);

            if (interaction?.Status == InteractionStatus.Blocked)
            {
                Core?.ShowError(GlobalTranslations.ProfileNotAvailable);
                return;
            }

            principal = await PrincipalApi.Get(IsAuthenticated);
            user = await ProfileApi.Get(null);
            view ??= await ProfileApi.GetView(IdUserView, null);

            if (view == null)
            {
                Core?.ShowError(GlobalTranslations.PartnerProfileNotAvailable);
                return;
            }
            else
            {
                if (Fake)
                    imageDataUriGallery = [view.GetPhoto(ImageHelper.PhotoType.Face, true)];
                else
                    imageDataUriGallery = [view.GetPhoto(ImageHelper.PhotoType.Face), view.GetPhoto(ImageHelper.PhotoType.Body)];

                imageDataUriGallery = imageDataUriGallery.Distinct().ToArray();

                filter = await FilterApi.Get(null);

                affinities = AffinityCore.GetAffinity(user, filter, view);
            }

            Core?.LoadingFinished?.Invoke(view);
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

    public async Task ShowModal(Origin Origin, string? IdUserView, ProfileModel? view = null, bool fake = false)
    {
        this.IdUserView = IdUserView;
        this.view = view;
        this.Fake = fake;
        this.Origin = Origin;
        modal?.Show();
        await LoadDataRender();
    }

    public Color GetColor(int perc)
    {
        if (perc >= 80)
        {
            return Color.Success;
        }
        else if (perc >= 60)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }

    private async Task Like()
    {
        try
        {
            interaction = await InteractionApi.Like(Origin, IdUserView, CoreEvent);
            Liked?.Invoke();

            if (interaction?.Status == InteractionStatus.Match)
            {
                await Toast.Success("Match");
                Matched?.Invoke();
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task Desike()
    {
        try
        {
            interaction = await InteractionApi.Dislike(Origin, IdUserView, CoreEvent);
            Disliked?.Invoke();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private void GoChat()
    {
        //Navigation.NavigateTo($"/Explore/Chat/{IdUserView}");
    }

    private bool ButtonDisabled(EventType type)
    {
        if (type == EventType.Like)
        {
            var noLike = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Like) ?? true;
            var validated = (user?.Validated ?? false) || interaction?.GetMyEvents(view!.Id).FirstOrDefault()?.Origin == Origin.Invite;

            return !(noLike && validated);
        }
        else if (type == EventType.Dislike)
        {
            var noDislike = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Dislike) ?? true;

            return !(noDislike);
        }
        // else if (type == EventType.Dating)
        // {
        //     var noDating = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Dating) ?? true;

        //     return !(noDating);
        // }
        // else if (type == EventType.Relationship)
        // {
        //     var noRelationship = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Relationship) ?? true;

        //     return !(noRelationship);
        // }
        // else if (type == EventType.Feedback)
        // {
        //     var noFeedback = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Feedback) ?? true;

        //     return !(noFeedback);
        // }
        else
        {
            return true;
        }
    }
}