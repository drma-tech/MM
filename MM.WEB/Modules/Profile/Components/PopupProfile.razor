@using MM.Shared.Models.Auth
@using MM.Shared.Models.Profile
@using MM.WEB.Core.Models
@using MM.WEB.Modules.Profile.Core
@using Button = MM.WEB.Resources.Button
@inherits ComponentCore<PopupProfile>
@attribute [Authorize]

@inject ProfileApi ProfileApi
@inject FilterApi FilterApi
@inject InteractionApi InteractionApi
@inject IJSRuntime JsRuntime

<MudDialog @ref="@modal" Style="width: 100%">
    <DialogContent>
        <RenderControl Core="Core" Model="view" ExpressionEmpty="(ProfileModel? obj) => obj == null" PrivateContent="true">
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudPaper style="position: relative;" Outlined="true">
                        @{
                            var totPercAff = affinities.GetPercentAffinity();
                        }
                        <MudChip T="string" Color="GetColor(totPercAff)" Label="true" Class="poster-chip" Style="top: 5px; left: 5px;">
                            @(totPercAff + "%")
                        </MudChip>
                        <MudChip T="string" Color="Color.Dark" Label="true" Class="poster-chip" Style="top: 5px; right: 5px;"
                                 Icon="@IconsFA.Solid.Icon("camera").Font">
                            @imageDataUriGallery.Count()
                        </MudChip>
                        <div id="@GallerySwiperId" class="swiper">
                            <div class="swiper-wrapper">
                                @foreach (var item in imageDataUriGallery)
                                {
                                    <div class="swiper-slide">
                                        <MudImage Src="@item" FallbackSrc="images/no-image.png" Style="max-height: 300px !important; width: 300px !important;"></MudImage>
                                    </div>
                                }
                            </div>
                            <div class="swiper-pagination"></div>
                            <div class="swiper-button-next"></div>
                            <div class="swiper-button-prev"></div>
                        </div>
                        <div class="mb-2" style="text-align: center;">
                            <MudChip T="string" Color="Color.Primary" Label="true">
                                @(view?.NickName ?? "NickName")
                            </MudChip>
                            <MudTooltip Text="@view?.Location">
                                <MudChip T="string" Color="Color.Secondary" Label="true" Icon="@Icons.Material.Filled.Apartment">
                                    @(view?.GetLocation(ProfileModel.LocationType.City) ?? "City")
                                </MudChip>
                            </MudTooltip>
                            <MudText Typo="Typo.body1" Align="Align.Justify" Class="ma-2">
                                @view?.Description
                            </MudText>
                        </div>
                        <MudGrid Spacing="2" Class="pa-2">
                            <MudItem xs="6">
                                <MudGrid Spacing="2">
                                    @if (interaction?.Status != InteractionStatus.Explorer)
                                    {
                                        <MudItem xs="12">
                                            <DrmaButton Icon="@IconsFA.Solid.Icon("thumb-up").Font" Color="Color.Primary" Clicked="Like" Disabled="ButtonDisabled(EventType.Like)" Core="CoreEvent">
                                                @Button.Like
                                            </DrmaButton>
                                        </MudItem>
                                        <MudItem xs="12">
                                            <DrmaButton Icon="@IconsFA.Solid.Icon("thumb-down").Font" Color="Color.Primary" Clicked="Like" Disabled="ButtonDisabled(EventType.Dislike)" Core="CoreEvent">
                                                @Button.Dislike
                                            </DrmaButton>
                                        </MudItem>
                                    }
                                    @if (interaction?.Status == InteractionStatus.Match || interaction?.Status == InteractionStatus.Dating)
                                    {
                                        <MudItem xs="12">
                                            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("comments").Font" Style="width: 100%;"
                                                       OnClick="GoChat" Disabled="true">
                                                @Button.Chat
                                            </MudButton>
                                        </MudItem>
                                    }
                                    @if (interaction?.Status == InteractionStatus.Match)
                                    {
                                        <MudItem xs="12">
                                            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("face-kiss-heart").Font" Style="width: 100%;"
                                                       OnClick="GoChat" Disabled="ButtonDisabled(EventType.Dating)">
                                                @Button.Dating
                                            </MudButton>
                                        </MudItem>
                                    }
                                    @if (interaction?.Status == InteractionStatus.Dating)
                                    {
                                        <MudItem xs="12">
                                            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("face-grin-heart").Font" Style="width: 100%;"
                                                       OnClick="GoChat" Disabled="ButtonDisabled(EventType.Relationship)">
                                                @Button.Relationship
                                            </MudButton>
                                        </MudItem>
                                    }
                                    @if (interaction?.Status == InteractionStatus.Dating || interaction?.Status == InteractionStatus.Relationship)
                                    {
                                        <MudItem xs="12">
                                            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("comment-dots").Font" Style="width: 100%;"
                                                       OnClick="GoChat" Disabled="ButtonDisabled(EventType.Feedback)">
                                                @Button.Feedback
                                            </MudButton>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudItem>
                            <MudItem xs="6">
                                <MudGrid Spacing="2">
                                    <MudItem xs="12">
                                        <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("trash").Font" Style="width: 100%;"
                                                   OnClick="report!.ShowModal" Disabled="true || Fake">
                                            @Button.Delete
                                        </MudButton>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("flag").Font" Style="width: 100%;"
                                                   OnClick="report!.ShowModal" Disabled="true || Fake">
                                            @Button.Report
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    @* @if (view.ActivityStatus == ActivityStatus.Today)
                    {
                    <Badge Color="Color.Success">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado hoje
                    </Badge>
                    }
                    else if (view.ActivityStatus == ActivityStatus.Week)
                    {
                    <Badge Color="Color.Warning">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado esta semana
                    </Badge>
                    }
                    else if (view.ActivityStatus == ActivityStatus.Month)
                    {
                    <Badge Color="Color.Danger">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado este mês
                    </Badge>
                    }
                    else
                    {
                    <Badge Color="Color.Dark">
                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> usuário desativado
                    </Badge>
                    } *@
                </MudItem>
                <MudItem xs="12" sm="6" md="8">
                    <CardCompatibility User="user" Filter="filter" View="view" Affinities="affinities"></CardCompatibility>
                </MudItem>
            </MudGrid>
            <ProfileReport @ref="report"></ProfileReport>
        </RenderControl>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(async() => { await modal!.CloseAsync(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter][EditorRequired] public string? UserId { get; set; }
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }

    [Parameter] public Action? Liked { get; set; }
    [Parameter] public Action? Disliked { get; set; }
    [Parameter] public Action? Matched { get; set; }

    public MM.Shared.Enums.Origin Origin { get; set; }
    private MudDialog? modal;

    public string? IdUserView { get; set; }
    public bool Fake { get; set; }

    private ClientePrincipal? principal;
    private ProfileModel? user;
    private FilterModel? filter;
    private ProfileModel? view;
    public RenderControlCore<ProfileModel?>? Core { get; set; } = new();

    private List<AffinityVM> affinities = [];
    private InteractionModel? interaction;
    public RenderControlCore<InteractionModel?>? CoreEvent { get; set; } = new();

    private readonly string GallerySwiperId = $"swiper-{Guid.NewGuid()}";
    string[] imageDataUriGallery = [];

    private ProfileReport? report;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await JsRuntime.InvokeVoidAsync("initCalendar", GallerySwiperId);
    }

    protected override async Task LoadDataRender()
    {
        try
        {
            if (string.IsNullOrEmpty(IdUserView)) return;

            Core?.LoadingStarted?.Invoke();

            if (IdUserView == UserId)
            {
                Core?.ShowError("Something wrong happened.");
                return;
            }

            if (!Fake) interaction = await InteractionApi.GetInteraction(IdUserView, null);

            if (interaction?.Status == InteractionStatus.Blocked)
            {
                Core?.ShowError(GlobalTranslations.ProfileNotAvailable);
                return;
            }

            principal = await PrincipalApi.Get(IsAuthenticated);
            user = await ProfileApi.Get(null);
            view ??= await ProfileApi.GetView(IdUserView, null);

            if (view == null)
            {
                Core?.ShowError(GlobalTranslations.PartnerProfileNotAvailable);
                return;
            }

            if (Fake)
                imageDataUriGallery = [view.GetPhoto(ImageHelper.PhotoType.Face, true)];
            else
                imageDataUriGallery = [view.GetPhoto(ImageHelper.PhotoType.Face), view.GetPhoto(ImageHelper.PhotoType.Body)];

            imageDataUriGallery = imageDataUriGallery.Distinct().ToArray();

            filter = await FilterApi.Get(null);

            affinities = AffinityCore.GetAffinity(user, filter, view);

            Core?.LoadingFinished?.Invoke(view);
        }
        catch (Exception ex)
        {
            Core?.ShowError(ex.Message);
        }
    }

    public async Task ShowModal(MM.Shared.Enums.Origin Origin, string? IdUserView, ProfileModel? view = null, bool fake = false)
    {
        this.IdUserView = IdUserView;
        this.view = view;
        Fake = fake;
        this.Origin = Origin;
        modal?.ShowAsync(view?.NickName, PopupHelper.Options(MaxWidth.Large));
        await LoadDataRender();
    }

    public Color GetColor(int perc)
    {
        if (perc >= 80)
        {
            return Color.Success;
        }

        if (perc >= 60)
        {
            return Color.Warning;
        }

        return Color.Error;
    }

    private async Task Like()
    {
        try
        {
            interaction = await InteractionApi.Like(Origin, IdUserView, CoreEvent);
            Liked?.Invoke();

            if (interaction?.Status == InteractionStatus.Match)
            {
                Snackbar.Add("Match", Severity.Success);
                Matched?.Invoke();
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task Desike()
    {
        try
        {
            interaction = await InteractionApi.Dislike(Origin, IdUserView, CoreEvent);
            Disliked?.Invoke();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private void GoChat()
    {
        //Navigation.NavigateTo($"/Explore/Chat/{IdUserView}");
    }

    private bool ButtonDisabled(EventType type)
    {
        if (type == EventType.Like)
        {
            var noLike = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Like) ?? true;
            var validated = (user?.Validated ?? false) || interaction?.GetMyEvents(view!.Id).FirstOrDefault()?.Origin == MM.Shared.Enums.Origin.Invite;

            return !(noLike && validated);
        }

        if (type == EventType.Dislike)
        {
            var noDislike = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Dislike) ?? true;

            return !noDislike;
        }
        // else if (type == EventType.Dating)
        // {
        //     var noDating = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Dating) ?? true;

        //     return !(noDating);
        // }
        // else if (type == EventType.Relationship)
        // {
        //     var noRelationship = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Relationship) ?? true;

        //     return !(noRelationship);
        // }
        // else if (type == EventType.Feedback)
        // {
        //     var noFeedback = interaction?.GetMyEvents(UserId).Empty(a => a.Type == EventType.Feedback) ?? true;

        //     return !(noFeedback);
        // }

        return true;
    }

}