@using MM.Shared.Models.Profile;
@using MM.WEB.Modules.Profile.Core;
@inherits ComponentCore<PopupProfile>
@attribute [Authorize]

@inject ProfileApi ProfileApi

<Modal @ref="modal">
    <ModalContent Centered="true" Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <ModalTitle>Perfil</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody MaxHeight="70">
            <RenderControl Core="Core" Model="view" ExpressionEmpty="((ProfileModel? obj)=> obj == null)" PrivateContent="true">
                <Row HorizontalGutter="8" VerticalGutter="0">
                    <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is4.OnWidescreen">
                        <Card Margin="Margin.Is2.FromBottom">
                            <CardBody Padding="Padding.Is0">
                                @{
                                    int totPercAff = affinities.GetPercentAffinity(null);
                                }
                                <Badge Color="GetColor(totPercAff)" Style="position: absolute; top: 10px; left: 10px; z-index: 2;">@(totPercAff + "%")</Badge>
                                    <Badge Color="Color.Dark" Style="position: absolute; top: 10px; right: 10px; z-index: 2;">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Camera"></Blazorise.Icon> @imageDataUriGallery.Count()
                                    </Badge>
                                    <Carousel @bind-SelectedSlide="selectedImage" Autoplay="false" ShowControls="imageDataUriGallery.Count() > 1" ShowIndicators="imageDataUriGallery.Count() > 1">
                                        @foreach (var item in imageDataUriGallery)
                                    {
                                        <CarouselSlide @key="@item" Name="@item" Style="text-align: center; background-color: black;">
                                            <Image Source="@item" Style="max-height: 450px !important;" />
                                        </CarouselSlide>
                                    }
                                </Carousel>
                            </CardBody>
                            <CardBody>
                                <Badge Color="Color.Secondary">
                                    @view?.NickName
                                </Badge>
                                <Badge Color="Color.Secondary" Margin="Margin.Is1.FromEnd">
                                    <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt"></Blazorise.Icon> @view?.GetLocation(ProfileModel.LocationType.City)
                                </Badge>
                                @* @if (view.ActivityStatus == ActivityStatus.Today)
                                {
                                    <Badge Color="Color.Success">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado hoje
                                    </Badge>
                                }
                                else if (view.ActivityStatus == ActivityStatus.Week)
                                {
                                    <Badge Color="Color.Warning">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado esta semana
                                    </Badge>
                                }
                                else if (view.ActivityStatus == ActivityStatus.Month)
                                {
                                    <Badge Color="Color.Danger">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> logado este mês
                                    </Badge>
                                }
                                else
                                {
                                    <Badge Color="Color.Dark">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.DotCircle"></Blazorise.Icon> usuário desativado
                                    </Badge>
                                } *@
                                @* @if (view.Reports.Any())
                                {
                                <Paragraph Margin="Margin.Is0.FromTop.Is0.FromBottom">
                                @foreach (var item in view.Reports)
                                {
                                <Badge Color="Color.Warning" Style="cursor: help;">
                                <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> @item.Type.GetName()
                                </Badge>
                                }
                                </Paragraph>
                                }*@
                                <Paragraph TextAlignment="TextAlignment.Justified" Margin="Margin.Is2.FromTop.Is0.FromBottom">
                                    @view?.Description
                                </Paragraph>
                            </CardBody>
                            <CardBody>
                                @* @if (interaction != null && interaction.IsActiveInteraction())
                                {
                                <BtnChat IdUserView="@IdUserView"></BtnChat>
                                }
                                else
                                {
                                <BtnBlink IdUserView="@IdUserView"></BtnBlink>
                                }*@
                                <Dropdown Float="Float.End" Disabled="true">
                                    <Button Color="Color.Danger" Clicked="report!.ShowModal" Disabled="true">
                                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Trash"></Blazorise.Icon> Deletar
                                    </Button>
                                    <DropdownToggle Split="true" Color="Color.Danger" />
                                    <DropdownMenu>
                                        <DropdownItem Clicked="report.ShowModal">Deletar e Denunciar</DropdownItem>
                                    </DropdownMenu>
                                </Dropdown>
                            </CardBody>
                        </Card>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsHalf.OnDesktop.Is8.OnWidescreen">
                        <Row HorizontalGutter="8" VerticalGutter="0">
                            @*<Column ColumnSize="ColumnSize.IsFull.Is8.OnFullHD">
                            <Card Margin="Margin.Is2.FromBottom">
                            <CardHeader>Conquistas</CardHeader>
                            <CardBody>
                            <Row HorizontalGutter="8" VerticalGutter="0">
                            <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Ranking"></ProfileBadge>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Seniority"></ProfileBadge>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.VerifiedProfile"></ProfileBadge>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsHalf.Is3.OnWidescreen" Margin="Margin.Is2.FromBottom">
                            <ProfileBadge Type="@badge.Popular"></ProfileBadge>
                            </Column>
                            </Row>
                            </CardBody>
                            </Card>
                            </Column>*@
                            <Column ColumnSize="ColumnSize.IsFull.Is4.OnFullHD">
                                <CardCompatibility Affinities="affinities"></CardCompatibility>
                            </Column>
                        </Row>
                    </Column>
                </Row>
                <ProfileReport @ref="report"></ProfileReport>
            </RenderControl>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@modal!.Hide">Fechar</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    [Parameter][EditorRequired] public string? UserId { get; set; }

    private Modal? modal;
    // public Loading Loading { get; set; } = default!;

    [Parameter] public HttpClient Http { get; set; } = default!;

    public async Task ShowModal(string IdUserView)
    {
        modal?.Show();
        this.IdUserView = IdUserView;
        await LoadDataRender();
    }

    public string? IdUserView { get; set; }

    private ProfileModel? user;
    private ProfileModel? view;
    public RenderControlCore<ProfileModel?>? Core { get; set; } = new();

    private List<AffinityVM> affinities = new();
    //private ProfileGamificationModel gamification;
    //private ProfileBadgeModel? badge = new();
    //private InteractionModel interaction;

    string? selectedImage;
    string[] imageDataUriGallery = Array.Empty<string>();

    private ProfileReport? report;

    protected override async Task LoadDataRender()
    {
        try
        {
            if (string.IsNullOrEmpty(IdUserView)) return;

            if (IdUserView == UserId)
            {
                // Loading.Invalid();
                return;
            }

            // Loading.Start();

            user = await ProfileApi.Get(Core);
            // view = await ProfileApi.GetView(IdUserView);

            // Loading.Finish(user == null);

            if (view == null)
            {
                await Toast.Error("Perfil não encontrado. Favor, tentar novamente.");
            }
            else
            {
                imageDataUriGallery = new string[] { view.GetMainPhoto() }.Concat(view.GetGalleryPhotos()).ToArray();
                selectedImage = imageDataUriGallery.First();

                affinities = AffinityCore.GetAffinity(user, view);
                //gamification = view.Gamification;
                //if (view?.Badge != null) badge = view.Badge;
                //interaction = await Http.Interation_Get(SessionStorage, IdUserView.ToString());
            }
        }
        catch (Exception ex)
        {
            await Toast.Error(ex.Message);
        }
    }

    public Color GetColor(int perc)
    {
        if (perc >= 80)
        {
            return Color.Success;
        }
        else if (perc >= 60)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }
}