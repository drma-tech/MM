@using MM.Shared.Models.Auth
@using MM.WEB.Modules.Auth
@using MM.WEB.Modules.Auth.Core
@using MM.WEB.Modules.Profile.Core
@using MM.WEB.Modules.Profile.Resources
@using MM.WEB.Modules.Subscription.Core

@inherits PageCore<ProfileHeader>

@inject PaddleConfigurationApi ConfigurationApi
@inject GravatarApi GravatarApi

@inject IHttpClientFactory httpClientFactory
@inject IJSRuntime JsRuntime

<Jumbotron Background="Background.Secondary" Margin="Margin.Is3.FromBottom" Padding="Padding.Is3">
    <Row>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Figure Size="FigureSize.Is64x64" Margin="Margin.Is0.OnDesktop">
                <FigureImage Source="@Gravatar?.photos.LastOrDefault()?.value" AlternateText="@Gravatar?.displayName" Rounded="true" />
            </Figure>
        </Column>
        <Column>
            <Text TextSize="TextSize.Heading4">
                @Gravatar?.displayName
            </Text><br />
            <Text TextSize="TextSize.Heading6">
                @Client?.Email
            </Text>
        </Column>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Button Color="Color.Primary" Clicked="MyAccount">
                <Blazorise.Icon Name="FontAwesomeIcons.UserCircle"></Blazorise.Icon>
                @Translations.Account
            </Button>
            <Button Color="Color.Primary" Clicked="OpenSubscription">
                <Blazorise.Icon Name="FontAwesomeIcons.Gem"></Blazorise.Icon>
                @Translations.Subscription
            </Button>
        </Column>
    </Row>
</Jumbotron>
@* @if (Platform.NotEmpty() && Reviewed.Empty() && Client != null && (Client.ClientePaddle == null || !Client.ClientePaddle.IsPaidUser))
{
    <Alert Visible="true" Color="Color.Info" Class="mb-3">
        <AlertMessage Display="Display.Inline.OnTablet.Block.OnMobile">
            @GlobalTranslations.WriteReviewTitle
        </AlertMessage>
        <AlertDescription>
            <Span Margin="Margin.Is2.FromEnd">@GlobalTranslations.WriteReviewMessage</Span>
            @if (Platform == "play")
            {
                <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                        To="https://play.google.com/store/apps/details?id=com.streamingdiscovery.www.twa" Type="ButtonType.Link" Target="Target.Blank">
                    <Image Source="/logo/google-play.png" Width="Width.Px(16)"></Image> Google Play
                </Button>
            }
            @if (Platform == "windows")
            {
                <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                        To="https://apps.microsoft.com/detail/9PB1PKRDD8L0" Type="ButtonType.Link" Target="Target.Blank">
                    <Image Source="/logo/microsoft-store.png" Width="Width.Px(16)"></Image> Microsoft Store
                </Button>
            }
            @if (Platform == "webapp")
            {
                <Button Color="Color.Secondary" Size="Size.Small" Clicked="SetReviewed"
                        To="https://www.trustpilot.com/review/modern-matchmaker.com" Type="ButtonType.Link" Target="Target.Blank">
                    <Image Source="/logo/trustpilot.png" Width="Width.Px(16)"></Image> Trustpilot
                </Button>
            }
        </AlertDescription>
    </Alert>
} *@

@code {
    [SupplyParameterFromQuery][Parameter] public string? _ptxn { get; set; }

    public ClientePrincipal? Client { get; set; }
    public Gravatar? Gravatar { get; set; }
    public string? Platform { get; set; }
    public string? Reviewed { get; set; }

    protected override void OnInitialized()
    {
        PrincipalApi.DataChanged += (ClientePrincipal? model) => { Client = model; StateHasChanged(); };
    }

    protected override async Task LoadDataRender()
    {
        Client = await PrincipalApi.Get(IsAuthenticated);
        Gravatar = await GravatarApi.GetGravatar(Client?.Email);

        if (!string.IsNullOrEmpty(_ptxn))
        {
            var config = await ConfigurationApi.GetConfigurations();
            if (config == null) throw new NotificationException("server comunication error");

            await JsRuntime.InvokeVoidAsync("startPaddle", config.Token);
        }

        Platform = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "platform");
        Reviewed = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "reviewed");
    }

    private async Task MyAccount()
    {
        await ModalService.OpenPopup<ProfilePopup>(x => { x.Add(x => x.principal, Client); x.Add(x => x.Gravatar, Gravatar); }, ModalSize.Large);
    }

    private async Task OpenSubscription()
    {
        await ModalService.SubscriptionPopup(Client, IsAuthenticated);
    }

    private async Task SetReviewed()
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "reviewed", "true");
        Reviewed = "true";
    }
}
