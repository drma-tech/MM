@using MM.Shared.Models.Profile;
@using MM.WEB.Core.Enum
@using MM.WEB.Core.Models
@using MM.WEB.Modules.Shared.Popup;
@inherits ComponentCore<CardCompatibility>

<Alert Visible="true" Color="@GetColor(null)" Shadow="Shadow.Small">
    <Heading Size="HeadingSize.Is5">
        Compatibilidade Geral (@(Affinities.GetPercentAffinity(null) + "%"))
        <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.End" Clicked="@(()=>help?.ShowModal())" title="Ajuda" Margin="Margin.Is2.FromStart">
            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon>
        </Button>
    </Heading>
    @if (totPercAff <= 60)
    {
        <AlertDescription>Unfortunately, you don't have much in common. We wish you both the best of luck, as it won't be an easy task.</AlertDescription>
    }
    else if (totPercAff <= 80)
    {
        <AlertDescription>You are not a perfect couple, but that doesn't mean you can't work together. Carefully analyze our report and work through these differences together.</AlertDescription>
    }
    else
    {
        <AlertDescription>Congratulations, you two are made for each other. This relationship has a bright future ahead of it.</AlertDescription>
    }
</Alert>

<Alert Visible="true" Color="@GetColor(Section.Basic)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Basic (@Affinities.GetPercentAffinity(Section.Basic)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.Location)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Location" User="@User" Filter="@Filter" Value="@View.Location" ValueUser="@User.Location" ClassIcon="fas fa-map-marker-alt" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Languages)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Language" User="@User" Filter="@Filter" Values="@View.Languages" ValuesUser="@Filter.Languages" ClassIcon="fas fa-language" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.MaritalStatus)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.MaritalStatus" User="@User" Filter="@Filter" Value="@View.MaritalStatus" ValuesUser="@Filter.MaritalStatus" ClassIcon="far fa-heart" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.BiologicalSex)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.BiologicalSex" User="@User" Filter="@Filter" Value="@View.BiologicalSex" ValuesUser="@Filter.BiologicalSex" ClassIcon="fas fa-neuter" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.GenderIdentities)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.GenderIdentities" User="@User" Filter="@Filter" Values="@View.GenderIdentities" ValuesUser="@Filter.GenderIdentities" ClassIcon="fas fa-neuter" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.SexualOrientations)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.SexualOrientations" User="@User" Filter="@Filter" Values="@View.SexualOrientations" ValuesUser="@Filter.SexualOrientations" ClassIcon="fas fa-neuter" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Bio)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Bio (@Affinities.GetPercentAffinity(Section.Bio)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.Ethnicity)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Ethnicity" User="@User" Filter="@Filter" Value="@View.Ethnicity" ValuesUser="@Filter.Ethnicity" ClassIcon="fas fa-globe" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.BodyType)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.BodyType" User="@User" Filter="@Filter" Value="@View.BodyType" ValuesUser="@Filter.BodyType" ClassIcon="fas fa-weight" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Age)" Type="@CompatibilityType.Range" Item="CompatibilityItem.Age" User="@User" Filter="@Filter" Value="@View.Age" ValueUser="@ProfileHelper.GetAge(User.BirthDate)" ClassIcon="fas fa-birthday-cake" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Height)" Type="@CompatibilityType.Range" Item="@CompatibilityItem.Height" User="@User" Filter="@Filter" Value="@View.Height" ValueUser="@User.Height" ClassIcon="fas fa-ruler" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Neurodiversity)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Neurodiversity" User="@User" Filter="@Filter" Value="@View.Neurodiversity" ValueUser="@User.Neurodiversity" ClassIcon="fas fa-brain" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Disabilities)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Disabilities" User="@User" Filter="@Filter" Values="@View.Disabilities" ValuesUser="@User.Disabilities" ClassIcon="fas fa-wheelchair" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Lifestyle)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Lifestyle (@Affinities.GetPercentAffinity(Section.Lifestyle)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.Drink)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Drink" User="@User" Filter="@Filter" Value="@View.Drink!.Value" ValuesUser="@(Filter.Drink.Any()?Filter.Drink:[User.Drink!.Value])" ClassIcon="fas fa-glass-cheers" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Smoke)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Smoke" User="@User" Filter="@Filter" Value="@View.Smoke!.Value" ValuesUser="@(Filter.Smoke.Any()?Filter.Smoke:[User.Smoke!.Value])" ClassIcon="fas fa-smoking" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Diet)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Diet" User="@User" Filter="@Filter" Value="@View.Diet!.Value" ValuesUser="@(Filter.Diet.Any()?Filter.Diet:[User.Diet!.Value])" ClassIcon="fas fa-utensils" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Religion)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Religion" User="@User" Filter="@Filter" Value="@View.Religion!.Value" ValuesUser="@(Filter.Religion.Any()?Filter.Religion:[User.Religion!.Value])" ClassIcon="fas fa-praying-hands" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.FamilyInvolvement)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.FamilyInvolvement" User="@User" Filter="@Filter" Value="@View.FamilyInvolvement!.Value" ValuesUser="@(Filter.FamilyInvolvement.Any()?Filter.FamilyInvolvement:[User.FamilyInvolvement!.Value])" ClassIcon="fas fa-people-roof" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.HaveChildren)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.HaveChildren" User="@User" Filter="@Filter" Value="@View.HaveChildren!.Value" ValuesUser="@(Filter.HaveChildren.Any()?Filter.HaveChildren:[User.HaveChildren!.Value])" ClassIcon="fas fa-child" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.EducationLevel)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.EducationLevel" User="@User" Filter="@Filter" Value="@View.EducationLevel!.Value" ValuesUser="@(Filter.EducationLevel.Any()?Filter.EducationLevel:[User.EducationLevel!.Value])" ClassIcon="fas fa-graduation-cap" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.CareerCluster)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.CareerCluster" User="@User" Filter="@Filter" Value="@View.CareerCluster!.Value" ValuesUser="@(Filter.CareerCluster.Any()?Filter.CareerCluster:[User.CareerCluster!.Value])" ClassIcon="fas fa-briefcase" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.LivingSituation)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.LivingSituation" User="@User" Filter="@Filter" Value="@View.LivingSituation!.Value" ValuesUser="@(Filter.LivingSituation.Any()?Filter.LivingSituation:[User.LivingSituation!.Value])" ClassIcon="fas fa-house-user" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.TravelFrequency)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.TravelFrequency" User="@User" Filter="@Filter" Value="@View.TravelFrequency!.Value" ValuesUser="@(Filter.TravelFrequency.Any()?Filter.TravelFrequency:[User.TravelFrequency!.Value])" ClassIcon="fas fa-plane" Affinities="@Affinities"></ItemDataProfile>

    <ItemDataProfile For="@(() => View.NetWorth)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.NetWorth" User="@User" Filter="@Filter" Value="@View.NetWorth!.Value" ValuesUser="@(Filter.NetWorth.Any()?Filter.NetWorth:[User.NetWorth!.Value])" ClassIcon="fas fa-gem" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.AnnualIncome)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.AnnualIncome" User="@User" Filter="@Filter" Value="@View.AnnualIncome!.Value" ValuesUser="@(Filter.AnnualIncome.Any()?Filter.AnnualIncome:[User.AnnualIncome!.Value])" ClassIcon="fas fa-money-bill" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Personality)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Personality (@Affinities.GetPercentAffinity(Section.Personality)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.MoneyPersonality)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.MoneyPersonality" User="@User" Filter="@Filter" Value="@View.MoneyPersonality" ValueUser="@User.MoneyPersonality" ClassIcon="fas fa-wallet" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.SharedSpendingStyle)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.SharedSpendingStyle" User="@User" Filter="@Filter" Value="@View.SharedSpendingStyle" ValueUser="@User.SharedSpendingStyle" ClassIcon="fas fa-hand-holding-usd" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.RelationshipPersonality)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.RelationshipPersonality" User="@User" Filter="@Filter" Value="@View.RelationshipPersonality" ValueUser="@User.RelationshipPersonality" ClassIcon="fas fa-people-arrows" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.MBTI)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.MyersBriggsTypeIndicator" User="@User" Filter="@Filter" Value="@View.MBTI" ValueUser="@User.MBTI" ClassIcon="fas fa-user" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.LoveLanguage)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.LoveLanguage" User="@User" Filter="@Filter" Value="@View.LoveLanguage" ValueUser="@User.LoveLanguage" ClassIcon="fas fa-hand-holding-heart" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.SexPersonality)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.SexPersonality" User="@User" Filter="@Filter" Value="@View.SexPersonality" ValuesUser="@User.SexPersonalityPreference" ClassIcon="fas fa-heart" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Interest)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Interest (@Affinities.GetPercentAffinity(Section.Interest)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.Food)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Food" User="@User" Filter="@Filter" Values="@View.Food" ValuesUser="@User.Food" ClassIcon="fas fa-pizza-slice" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Vacation)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Vacation" User="@User" Filter="@Filter" Values="@View.Vacation" ValuesUser="@User.Vacation" ClassIcon="fas fa-plane-departure" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Sports)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Sports" User="@User" Filter="@Filter" Values="@View.Sports" ValuesUser="@User.Sports" ClassIcon="fas fa-swimmer" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.LeisureActivities)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.LeisureActivities" User="@User" Filter="@Filter" Values="@View.LeisureActivities" ValuesUser="@User.LeisureActivities" ClassIcon="fas fa-umbrella-beach" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.MusicGenre)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.MusicGenre" User="@User" Filter="@Filter" Values="@View.MusicGenre" ValuesUser="@User.MusicGenre" ClassIcon="fas fa-music" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.MovieGenre)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.MovieGenre" User="@User" Filter="@Filter" Values="@View.MovieGenre" ValuesUser="@User.MovieGenre" ClassIcon="fas fa-film" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.TVGenre)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.TVGenre" User="@User" Filter="@Filter" Values="@View.TVGenre" ValuesUser="@User.TVGenre" ClassIcon="fas fa-tv" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.ReadingGenre)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.ReadingGenre" User="@User" Filter="@Filter" Values="@View.ReadingGenre" ValuesUser="@User.ReadingGenre" ClassIcon="fas fa-book-reader" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Relationship)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Relationship (@Affinities.GetPercentAffinity(Section.Relationship)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.SharedFinances)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.SharedFinances" User="@User" Filter="@Filter" Value="@View.SharedFinances" ValuesUser="@(Filter.SharedFinances.Any()?Filter.SharedFinances:[User.SharedFinances!.Value])" ClassIcon="fas fa-money-bill-transfer" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.ConflictResolutionStyle)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.ConflictResolutionStyle" User="@User" Filter="@Filter" Value="@View.ConflictResolutionStyle" ValuesUser="@(Filter.ConflictResolutionStyle.Any()?Filter.ConflictResolutionStyle:[User.ConflictResolutionStyle!.Value])" ClassIcon="fas fa-handshake" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.HouseholdManagement)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.HouseholdManagement" User="@User" Filter="@Filter" Value="@View.HouseholdManagement" ValuesUser="@(Filter.HouseholdManagement.Any()?Filter.HouseholdManagement:[User.HouseholdManagement!.Value])" ClassIcon="fas fa-broom" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.TimeTogetherPreference)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.TimeTogetherPreference" User="@User" Filter="@Filter" Value="@View.TimeTogetherPreference" ValuesUser="@(Filter.TimeTogetherPreference.Any()?Filter.TimeTogetherPreference:[User.TimeTogetherPreference!.Value])" ClassIcon="fas fa-people-arrows" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.OppositeSexFriendships)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.OppositeSexFriendships" User="@User" Filter="@Filter" Value="@View.OppositeSexFriendships" ValuesUser="@(Filter.OppositeSexFriendships.Any()?Filter.OppositeSexFriendships:[User.OppositeSexFriendships!.Value])" ClassIcon="fas fa-restroom" Affinities="@Affinities"></ItemDataProfile>
}

<Alert Visible="true" Color="@GetColor(Section.Goals)" Padding="Padding.Is0.OnY" Margin="Margin.Is2.FromTop.Is1.FromBottom" Shadow="Shadow.Small">
    <AlertMessage>Goals (@Affinities.GetPercentAffinity(Section.Goals)%)</AlertMessage>
</Alert>
@if (View != null && Filter != null)
{
    <ItemDataProfile For="@(() => View.RelationshipIntentions)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.RelationshipIntentions" User="@User" Filter="@Filter" Values="@View.RelationshipIntentions" ValuesUser="@User.RelationshipIntentions" ClassIcon="fas fa-search" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.Relocation)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.Relocation" User="@User" Filter="@Filter" Value="@View.Relocation!.Value" ValuesUser="@([Filter.Relocation])" ClassIcon="fas fa-truck" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.WantChildren)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.WantChildren" User="@User" Filter="@Filter" Value="@View.WantChildren!.Value" ValuesUser="@(Filter.WantChildren.Any()?Filter.WantChildren:[User.WantChildren!.Value])" ClassIcon="fas fa-baby" Affinities="@Affinities"></ItemDataProfile>
    <ItemDataProfile For="@(() => View.IdealPlaceToLive)" Type="@CompatibilityType.Enum" Item="@CompatibilityItem.IdealPlaceToLive" User="@User" Filter="@Filter" Value="@View.IdealPlaceToLive!.Value" ValuesUser="@(Filter.IdealPlaceToLive.Any()?Filter.IdealPlaceToLive:[User.IdealPlaceToLive!.Value])" ClassIcon="fas fa-house-circle-check" Affinities="@Affinities"></ItemDataProfile>
}

<BasicModal @ref="help" Title="Help">
    <ul class="mr-4">
        <li>The calculation is based on research and statistics and may not accurately reflect all cases and/or contexts;</li>
        <li>If you have any questions and/or suggestions for improvements, please open a ticket on our support page;</li>
    </ul>
</BasicModal>

@code {
    [Parameter] public ProfileModel? User { get; set; }
    [Parameter] public FilterModel? Filter { get; set; }
    [Parameter] public ProfileModel? View { get; set; }
    [Parameter] public List<AffinityVM> Affinities { get; set; } = new();

    private BasicModal? help;
    private int totPercAff => Affinities.GetPercentAffinity(null);

    // protected override async Task OnInitializedAsync()
    // {
    //    if (View != null && User != null && User.DtInsert > DateTime.Now.AddDays(-7) && !LocalStorage.ContainKey("item_mais_detalhes"))
    //    {
    //        await Toast.Info("Clique em cada um dos itens para obter mais detalhes");
    //        LocalStorage.SetItem("item_mais_detalhes", true);
    //    }
    // }

    public Background GetBackground(Section? category)
    {
        var perc = Affinities.GetPercentAffinity(category);

        if (perc >= 80)
        {
            return Background.Success;
        }
        else if (perc >= 60)
        {
            return Background.Warning;
        }
        else
        {
            return Background.Danger;
        }
    }

    public Color GetColor(Section? category)
    {
        var perc = Affinities.GetPercentAffinity(category);

        if (perc >= 80)
        {
            return Color.Success;
        }
        else if (perc >= 60)
        {
            return Color.Warning;
        }
        else
        {
            return Color.Danger;
        }
    }
}
