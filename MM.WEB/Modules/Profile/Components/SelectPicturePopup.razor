@using static ImageHelper
@inherits ComponentCore<SelectPicturePopup>

@inject IJSRuntime JS

<MudDialog Style="width: 100%; max-height: 100vh;">
    <DialogContent>
        <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="OnFileSelected" MaximumFileCount="1">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload" Size="AppStateStatic.Size">
                    Select your photo
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
        @if (imageLoaded)
        {
            <div class="mt-2">
                <img id="cropImage" style="max-height: calc(100vh - 200px); max-width: 100%; object-fit: contain;" />
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@SavePictureHandle" Size="AppStateStatic.Size">@Button.Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public PhotoType PhotoType { get; set; }
    [Parameter] public EventCallback<(PhotoType, byte[])> CroppedPictureChanged { get; set; }

    // const long maxAllowedSize = 2 * 1024 * 1024; // 2 MB
    private bool imageLoaded = false;

    private async Task<byte[]> GetBuffer(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        _ = await file.OpenReadStream(file.Size).ReadAsync(buffer);
        return buffer;
    }

    public class ImageDimensions
    {
        public int Width { get; set; }
        public int Height { get; set; }
    }

    private async Task OnFileSelected(IBrowserFile? file)
    {
        try
        {
            if (file == null) return;

            var buffer = await GetBuffer(file);
            var base64 = Convert.ToBase64String(buffer);
            var imageUrl = $"data:{file.ContentType};base64,{base64}";

            var dimensions = await JS.InvokeAsync<ImageDimensions>("getImageSize", imageUrl);

            if (dimensions.Width < 300 || dimensions.Height < 300)
            {
                Snackbar.Add("The image must be at least 300x300 pixels.", Severity.Error);
                return;
            }

            imageLoaded = true;
            StateHasChanged();

            await JS.InvokeVoidAsync("eval", $"document.getElementById('cropImage').src = '{imageUrl}'");
            await JS.InvokeVoidAsync("initCropper", "cropImage", 1);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task SavePictureHandle()
    {
        var dataUrl = await JS.InvokeAsync<string>("getCroppedImage", 512, 512);

        var base64 = dataUrl.Split(',')[1];
        var buffer = Convert.FromBase64String(base64);
        await CroppedPictureChanged.InvokeAsync((PhotoType, buffer));

        MudDialog?.Close();
    }

}