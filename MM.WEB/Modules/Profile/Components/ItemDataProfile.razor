@using System.Linq.Expressions;
@using MM.Shared.Models.Profile;
@using MM.WEB.Core.Enum
@using MM.WEB.Core.Models
@inherits ComponentCore<ItemDataProfile<TValue, TValueUser>>
@typeparam TValue
@typeparam TValueUser

@if (Values != null && Values.Any())
{
    foreach (var item in Values)
    {
        <Badge Color="@GetColor(item)" Pill="true" Style="cursor: pointer;" @onclick="InstantiateModal">
            <Blazorise.Icon Name="@ClassIcon"></Blazorise.Icon> @GetValue(item)
        </Badge>
    }
}
else
{
    <Badge Color="@GetColor(Value)" Pill="true" Style="cursor: pointer;" @onclick="InstantiateModal">
        <Blazorise.Icon Name="@ClassIcon"></Blazorise.Icon> @GetValue(Value)
    </Badge>
}

@code {
    [Parameter] public Expression<Func<object>>? For { get; set; }
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public IEnumerable<TValue?>? Values { get; set; }
    [Parameter] public TValueUser? ValueUser { get; set; }
    [Parameter] public IEnumerable<TValueUser?>? ValuesUser { get; set; }
    [Parameter] public string? ClassIcon { get; set; }
    [Parameter] public List<AffinityVM> Affinities { get; set; } = [];

    [Parameter] public CompatibilityType Type { get; set; }
    [Parameter] public CompatibilityItem Item { get; set; }
    [Parameter] public ProfileModel? User { get; set; }
    [Parameter] public FilterModel? Filter { get; set; }

    private string GetValue(TValue? value)
    {
        if (value == null) return "Not Answered";

        if (value is string resultS)
        {
            if (string.IsNullOrEmpty(resultS))
                return "Not Answered";
            else
                return resultS;
        }
        else if (value is int resultI)
        {
            if (resultI <= 0)
                return "Not Answered";
            else
                return resultI.ToString();
        }
        else if (value is Enum resultE)
        {
            var result = resultE.GetName();

            if (string.IsNullOrEmpty(result))
                return "Not Answered";
            else
                return result;
        }
        else
        {
            throw new InvalidOperationException("invalid type: " + value.GetType());
        }
    }

    private Color GetColor(TValue? value)
    {
        if (!Affinities.Any(s => s.Item == Item)) //se o atributo não está mapeado no affinity, fica neutro
        {
            return Color.Secondary;
        }
        else if (Affinities.Single(s => s.Item == Item).HaveAffinity) //se está mapeado e tem affinity
        {
            if (value == null)
            {
                return Color.Success;
            }
            else if (value is Enum result && Type == CompatibilityType.Enum)
            {
                if (!GetExpectedValue().Any() || GetExpectedValue().Contains(result.GetName()))
                    return Color.Success;
                else
                    return Color.Warning;
            }
            else
            {
                return Color.Success;
            }
        }
        else //se mapeado mas sem afinidade
        {
            return Color.Danger;
        }
    }

    public Task InstantiateModal()
    {
        if (Values == null) Values = new TValue[] { Value };

        return ModalService.Show<AboutItemModal<TValue>>(CustomAttributeHelper.GetCustomAttribute(For)?.Name,
            x =>
            {
                x.Add(x => x.PreferenceValues, GetPreferenceValues());
                x.Add(x => x.ExpectedValues, GetExpectedValue());
                x.Add(x => x.ViewValues, Values);
                x.Add(x => x.Affinities, Affinities);
                x.Add(x => x.Profile, User);
                x.Add(x => x.Filter, Filter);
                x.Add(x => x.Type, Type);
                x.Add(x => x.Item, Item);
                x.Add(x => x.FieldInfo, CustomAttributeHelper.GetCustomAttribute(For)?.FieldInfo);
                x.Add(x => x.Tips, CustomAttributeHelper.GetCustomAttribute(For)?.Tips);
            },
            new ModalInstanceOptions()
                {
                    UseModalStructure = true,
                    Centered = true,
                    Size = ModalSize.Large,
                });
    }

    private List<string> GetPreferenceValues()
    {
        var result = new List<string>();

        foreach (var item in ValuesUser ?? new TValueUser[] { ValueUser })
        {
            if (item is Enum resultE)
            {
                result.Add(resultE.GetName());
            }
            else if (item != null)
            {
                result.Add(item.ToString());
            }
        }

        return result;
    }

    private IEnumerable<string?> GetExpectedValue()
    {
        if (User == null) return [];

        if (!GetPreferenceValues().Any()) return [];

        return Item switch
        {
            //BASIC
            CompatibilityItem.Location => AffinityCore.GetLocation(User, Filter).loc.ToArray(),
            CompatibilityItem.Language => AffinityCore.GetLanguages(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.MaritalStatus => AffinityCore.GetMaritalStatus(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.BiologicalSex => AffinityCore.GetBiologicalSex(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.GenderIdentities => AffinityCore.GetGenderIdentities(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.SexualOrientations => AffinityCore.GetSexualOrientations(User, Filter).Select(s => s.GetName()),
            //BIO
            CompatibilityItem.Ethnicity => AffinityCore.GetEthnicity(Filter).Select(s => s.GetName()),
            CompatibilityItem.BodyType => AffinityCore.GetBodyType(Filter).Select(s => s.GetName()),
            CompatibilityItem.Age => AffinityCore.GetAge(User, Filter).Select(s => s.ToString()),
            CompatibilityItem.Height => AffinityCore.GetHeight(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.Neurodiversity => AffinityCore.GetNeurodiversity(Filter).Select(s => s.GetName()),
            CompatibilityItem.Disabilities => AffinityCore.GetDisability(Filter).Select(s => s.GetName()),
            //LIFESTYLE
            CompatibilityItem.Drink => AffinityCore.GetDrink(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.Smoke => AffinityCore.GetSmoke(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.Diet => AffinityCore.GetDiet(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.Religion => AffinityCore.GetReligion(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.FamilyInvolvement => AffinityCore.GetFamilyInvolvement(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.HaveChildren => AffinityCore.GetHaveChildren(User, Filter).Select(s => s.GetName()),            
            CompatibilityItem.EducationLevel => AffinityCore.GetEducationLevel(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.CareerCluster => AffinityCore.GetCareerCluster(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.LivingSituation => AffinityCore.GetLivingSituation(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.TravelFrequency => AffinityCore.GetTravelFrequency(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.NetWorth => AffinityCore.GetNetWorth(User, Filter).Select(s => s.GetName()),
            CompatibilityItem.AnnualIncome => AffinityCore.GetAnnualIncome(User, Filter).Select(s => s.GetName()),
            //PERSONALITY
            CompatibilityItem.MoneyPersonality => AffinityCore.GetMoneyPersonality(User).Select(s => s.GetName()),
            CompatibilityItem.SharedSpendingStyle => AffinityCore.GetSharedSpendingStyle(User).Select(s => s.GetName()),
            CompatibilityItem.RelationshipPersonality => AffinityCore.GetRelationshipPersonality(User).Select(s => s.GetName()),
            CompatibilityItem.MyersBriggsTypeIndicator => AffinityCore.GetMyersBriggsTypeIndicator(User).Select(s => s.GetName()),
            CompatibilityItem.LoveLanguage => AffinityCore.GetLoveLanguage(User).Select(s => s.GetName()),
            CompatibilityItem.SexPersonality => AffinityCore.GetSexPersonality(User).Select(s => s.GetName()),
            //INTEREST
            CompatibilityItem.Food => AffinityCore.GetFood(User).Select(s => s.GetName()),
            CompatibilityItem.Vacation => AffinityCore.GetVacation(User).Select(s => s.GetName()),
            CompatibilityItem.Sports => AffinityCore.GetSports(User).Select(s => s.GetName()),
            CompatibilityItem.LeisureActivities => AffinityCore.GetLeisureActivities(User).Select(s => s.GetName()),
            CompatibilityItem.MusicGenre => AffinityCore.GetMusicGenre(User).Select(s => s.GetName()),
            CompatibilityItem.MovieGenre => AffinityCore.GetMovieGenre(User).Select(s => s.GetName()),
            CompatibilityItem.TVGenre => AffinityCore.GetTVGenre(User).Select(s => s.GetName()),
            CompatibilityItem.ReadingGenre => AffinityCore.GetReadingGenre(User).Select(s => s.GetName()),
            //RELATIONSHIP
            CompatibilityItem.SharedFinances => AffinityCore.GetSharedFinances(User).Select(s => s.GetName()),
            CompatibilityItem.ConflictResolutionStyle => AffinityCore.GetConflictResolutionStyle(User).Select(s => s.GetName()),
            CompatibilityItem.HouseholdManagement => AffinityCore.GetHouseholdManagement(User).Select(s => s.GetName()),
            CompatibilityItem.TimeTogetherPreference => AffinityCore.GetTimeTogetherPreference(User).Select(s => s.GetName()),
            CompatibilityItem.OppositeSexFriendships => AffinityCore.GetOppositeSexFriendships(User).Select(s => s.GetName()),
            //GOALS
            CompatibilityItem.RelationshipIntentions => AffinityCore.GetRelationshipIntentions(User).Select(s => s.GetName()),
            CompatibilityItem.Relocation => AffinityCore.GetRelocation(User).Select(s => s.GetName()),
            CompatibilityItem.WantChildren => AffinityCore.GetWantChildren(User, Filter).Select(s => s.GetName()),            
            CompatibilityItem.IdealPlaceToLive => AffinityCore.GetIdealPlaceToLive(User).Select(s => s.GetName()),

            _ => throw new InvalidOperationException("invalid CompatibilityItem: " + Item)
        };
    }
}