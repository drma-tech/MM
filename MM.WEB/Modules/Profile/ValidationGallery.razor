@page "/profile/validation/gallery"
@using BlazorCameraStreamer
@using MM.Shared.Models.Profile
@using MM.WEB.Api
@using MM.WEB.Modules.Profile.Core
@attribute [Authorize]
@inherits PageCore<ValidationGallery>

@inject ValidationApi ValidationApi
@inject IJSRuntime JsRuntime

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6">
        <MudCard Outlined="true">
            <MudCardHeader Class="pa-2">
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Main photo validation</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@IconsFA.Solid.Icon("user-shield").Font" Color="Color.Default"
                                   OnClick="@(async() => await MudDialog!.ShowAsync("Privacy Terms", PopupHelper.Options(MaxWidth.ExtraSmall)))" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="pa-2">
                <CameraStreamer @ref="CameraStreamerReference" Style="width: 100%;" CameraID="@DeviceId" OnRendered="OnRenderedHandler" Autostart="true" />
            </MudCardContent>
            <MudCardActions Class="pt-0">
                @if (Picture.Empty())
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("camera").Font" OnClick="TakeShot"
                               Class="me-2">
                        Take Shot
                    </MudButton>
                }
                else
                {
                    <MudButton Color="Color.Secondary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("rotate").Font" OnClick="Reset"
                               Class="me-2">
                        Reset
                    </MudButton>
                }
                <MudSpacer></MudSpacer>
                <MudButton Color="Color.Secondary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("camera-rotate").Font" OnClick="NextCamera"
                           Class="me-2" Disabled="Cameras.Length < 2">
                    Next Camera
                </MudButton>
                <MudSpacer></MudSpacer>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@IconsFA.Solid.Icon("share-square").Font" OnClick="SendPhoto"
                           Disabled="Picture.Empty() || Validation == null || Validation.Gallery">
                    Send
                </MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<MudDialog @ref="@MudDialog" Style="width: 100%">
    <DialogContent>
        <MudList T="string" Dense="true">
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                The photo taken by your camera will be kept private (it will not be accessible within the platform) for future verification, if necessary.
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                The data resulting from this validation (attributes of your face) will not be kept on our servers and will only exist during the detection process.
            </MudListItem>
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(async () => { await MudDialog!.CloseAsync(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

<FloatingButton Template="Template.Back"></FloatingButton>

@code
{
    private ValidationModel? Validation { get; set; }
    private RenderControlCore<ValidationModel?>? Core { get; set; } = new();
    private MudDialog? MudDialog { get; set; }
    private CameraStreamer? CameraStreamerReference;
    private byte[] Picture { get; set; } = [];

    private MediaDeviceInfoModel[] Cameras { get; set; } = [];
    private int CameraIndex { get; set; }
    private string? DeviceId { get; set; }
    private string? DeviceName { get; set; }

    protected override async Task LoadDataRender()
    {
        Validation = await ValidationApi.Get(Core);
    }

    private async void OnRenderedHandler()
    {
        try
        {
            if (CameraStreamerReference == null) return;

            // Check camera-access or ask user, if it's not allowed currently
            if (await CameraStreamerReference.GetCameraAccessAsync())
            {
                Cameras = await CameraStreamerReference.GetCameraDevicesAsync();

                var cameraId = await JsRuntime.InvokeAsync<string>("window.localStorage.getItem", ["CameraId"]);
                if (cameraId.NotEmpty()) CameraIndex = Array.FindIndex(Cameras, row => row.DeviceId == cameraId);

                if (CameraIndex == -1) CameraIndex = 0; //Default to first camera
                DeviceId = Cameras[CameraIndex].DeviceId;
                DeviceName = Cameras[CameraIndex].Label;
                StateHasChanged();

                await JsRuntime.InvokeVoidAsync("window.localStorage.setItem", "CameraId", DeviceId);
                await JsRuntime.InvokeVoidAsync("window.localStorage.setItem", "CameraName", DeviceName);

                await CameraStreamerReference.ReloadAsync();
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task NextCamera()
    {
        try
        {
            if (CameraStreamerReference == null) return;

            if (CameraIndex == Cameras.Length - 1)
            {
                CameraIndex = 0;
            }
            else
            {
                CameraIndex = CameraIndex + 1;
            }

            DeviceId = Cameras[CameraIndex].DeviceId;
            DeviceName = Cameras[CameraIndex].Label;

            await JsRuntime.InvokeVoidAsync("window.localStorage.setItem", "CameraId", DeviceId);
            await JsRuntime.InvokeVoidAsync("window.localStorage.setItem", "CameraName", DeviceName);

            await CameraStreamerReference.ReloadAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected async Task TakeShot()
    {
        try
        {
            if (CameraStreamerReference == null) return;

            var data = await CameraStreamerReference.GetCurrentFrameAsync();
            data = data[(data.IndexOf(',') + 1)..]; // Remove the suffix added by javascript
            Picture = Convert.FromBase64String(data);

            await CameraStreamerReference.StopAsync();

            Validation ??= new ValidationModel();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected async Task Reset()
    {
        try
        {
            if (CameraStreamerReference == null) return;

            Picture = [];
            await CameraStreamerReference.ReloadAsync();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    protected async Task SendPhoto()
    {
        try
        {
            Validation = await ValidationApi.UploadPhotoValidation(Core, Picture);
            Snackbar.Add("Photo validated successfully!", Severity.Success);
            await JsRuntime.InvokeVoidAsync("history.back");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }
}