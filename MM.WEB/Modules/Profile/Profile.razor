@page "/profile"
@using Bogus
@using FluentValidation
@using MM.Shared.Models.Profile
@using MM.Shared.Models.Profile.Core
@using MM.Shared.Requests
@using MM.WEB.Modules.Profile.Components
@using MM.WEB.Modules.Profile.Core
@using MM.WEB.Modules.Profile.Resources
@using Button = MM.WEB.Resources.Button
@using CardHeader = MM.WEB.Resources.CardHeader
@using Country = MM.Shared.Enums.Country
@using Height = MM.Shared.Enums.Height
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inherits PageCore<Profile>

@inject ProfileApi ProfileApi
@inject FilterApi FilterApi
@inject SettingApi SettingApi
@inject ValidationApi ValidationApi
@inject InviteApi InviteApi
@inject MyLikesApi MyLikesApi
@inject MyMatchesApi MyMatchesApi

<SeoHeader Title="Profile" Description="@SeoTranslations.AppDescription" Url="/profile" Index="false" Keywords="@([])"></SeoHeader>
<GoogleAdSense Section="@GoogleAdSense.AdUnit.Profile" IsAuthenticated="IsAuthenticated" Format="horizontal"></GoogleAdSense>

@if (!IsAuthenticated)
{
    <MudPaper Class="pa-3 mb-3 mud-theme-primary" Outlined="true" Style="text-align: center;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="my-3">
            @Translations.HeroCall
        </MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Login" Class="my-4" Size="AppStateStatic.Size">
            @Translations.HeroButton
        </MudButton>
        <MudText Typo="Typo.caption" Align="Align.Center" Class="my-3 d-block">
            @Translations.HeroNote
        </MudText>
    </MudPaper>
}

@if (IsAuthenticated)
{
    <MudAlert Severity="MudBlazor.Severity.Warning" Variant="Variant.Outlined" Dense="true" Class="mb-3">
        <strong>@GlobalTranslations.BetaVersion</strong> @GlobalTranslations.ProductUnderDevelopment
    </MudAlert>
}

<MudGrid Spacing="3" Class="mb-2">
    <MudItem xs="12" sm="6" md="4">
        @if ((principal == null || !principal.PublicProfile) && validation == null)
        {
            <MudPaper Class="pa-3" Outlined="true">
                <MudStepper Vertical="true" NonLinear="true" CompletedStepColor="Color.Success" CurrentStepColor="Color.Primary">
                    <ChildContent>
                        <MudStep Title="@Resources.Translations.StepProfile" SecondaryText="@Resources.Translations.StepProfileDesc" Completed="ProfileValid">
                            <MudButton Color="@GetButtonColor(ProfileValid)" StartIcon="@GetButtonIcon(ProfileValid)" Variant="Variant.Filled" Href="/profile/data"
                                       Style="width: 100%;" Disabled="@(principal == null || principal.PublicProfile)" Size="AppStateStatic.Size">
                                @Button.Profile
                            </MudButton>
                        </MudStep>
                        <MudStep Title="@Resources.Translations.StepFilter" SecondaryText="@Resources.Translations.StepFilterDesc" Completed="FilterValid">
                            <MudButton Color="GetButtonColor(FilterValid)" StartIcon="@GetButtonIcon(FilterValid)" Variant="Variant.Filled" Href="/profile/filter"
                                       Style="width: 100%;" Disabled="profile == null" Size="AppStateStatic.Size">
                                @Button.Filters
                            </MudButton>
                        </MudStep>
                        <MudStep Title="@Resources.Translations.StepSettings" SecondaryText="@Resources.Translations.StepSettingsDesc" Completed="SettingValid">
                            <MudButton Color="GetButtonColor(SettingValid)" StartIcon="@GetButtonIcon(SettingValid)" Variant="Variant.Filled" Href="/profile/setting"
                                       Style="width: 100%;" Disabled="profile == null || principal == null || principal.PublicProfile" Size="AppStateStatic.Size">
                                @Button.Settings
                            </MudButton>
                        </MudStep>
                        <MudStep Title="@Resources.Translations.StepGallery" SecondaryText="@Resources.Translations.StepGalleryDesc" Completed="GalleryValid">
                            <MudButton Color="GetButtonColor(GalleryValid)" StartIcon="@GetButtonIcon(GalleryValid)" Variant="Variant.Filled" Href="/profile/gallery"
                                       Style="width: 100%;"
                                       Disabled="profile == null || profile.Gallery?.Type == GalleryType.BlindDate || principal == null || principal.PublicProfile" Size="AppStateStatic.Size">
                                @Button.Gallery
                            </MudButton>
                        </MudStep>
                        <MudStep Title="@Resources.Translations.StepValidation" SecondaryText="@Resources.Translations.StepGalleryDesc" Completed="ValidationsValid">
                            <MudButton Color="GetButtonColor(ValidationsValid)" StartIcon="@GetButtonIcon(ValidationsValid)" Variant="Variant.Filled" Href="/profile/validation"
                                       Style="width: 100%;" Disabled="profile == null || profile.Gallery?.Type == GalleryType.BlindDate" Size="AppStateStatic.Size">
                                @Button.Validations
                            </MudButton>
                        </MudStep>
                    </ChildContent>
                    <ActionContent></ActionContent>
                    <CompletedContent>
                        <MudToggleGroup T="bool" SelectionMode="SelectionMode.SingleSelection" Value="@(principal?.PublicProfile ?? false)" ValueChanged="(bool value) => IsPublicChanged(value)"
                                        CheckMark="true" FixedContent="true" Disabled="principal == null" Size="AppStateStatic.Size">
                            <MudToggleItem Value="false" Text="@Resources.Translations.Private" SelectedIcon="@IconsFA.Solid.Icon("eye-slash").Font" UnselectedIcon="@IconsFA.Solid.Icon("eye-slash").Font" />
                            <MudToggleItem Value="true" Text="@Resources.Translations.Public" SelectedIcon="@IconsFA.Solid.Icon("eye").Font" UnselectedIcon="@IconsFA.Solid.Icon("eye").Font" />
                        </MudToggleGroup>
                    </CompletedContent>
                </MudStepper>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-3" Outlined="true" Style="text-align: center;">
                <MudAvatar Class="mb-2" Style="width: 50%; height: auto;">
                    <MudImage Src="@(profile?.GetPhoto(ImageHelper.PhotoType.Face) ?? "images/no-picture.png")" FallbackSrc="images/no-picture.png" Fluid="true" />
                </MudAvatar>
                <div class="mb-2" style="text-align: center;">
                    <MudChip T="string" Color="Color.Primary" Label="true">
                        @(profile?.NickName ?? "NickName")
                    </MudChip>
                    <MudTooltip Text="@profile?.Location">
                        <MudChip T="string" Color="Color.Secondary" Label="true" Icon="@Icons.Material.Filled.Apartment">
                            @(profile?.GetLocation(ProfileModel.LocationType.City) ?? "City")
                        </MudChip>
                    </MudTooltip>
                    <MudText Typo="Typo.body1" Align="Align.Justify">
                        @profile?.Description
                    </MudText>
                </div>
                <MudGrid Spacing="2">
                    <MudItem xs="6">
                        <MudButton Color="@GetButtonColor(ProfileValid)" StartIcon="@GetButtonIcon(ProfileValid)" Variant="Variant.Filled" Href="/profile/data"
                                   Style="width: 100%;" Disabled="@(principal == null || principal.PublicProfile)" Size="AppStateStatic.Size">
                            @Button.Profile
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton Color="GetButtonColor(FilterValid)" StartIcon="@GetButtonIcon(FilterValid)" Variant="Variant.Filled" Href="/profile/filter"
                                   Style="width: 100%;" Disabled="profile == null" Size="AppStateStatic.Size">
                            @Button.Filters
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton Color="GetButtonColor(SettingValid)" StartIcon="@GetButtonIcon(SettingValid)" Variant="Variant.Filled" Href="/profile/setting"
                                   Style="width: 100%;" Disabled="profile == null || principal == null || principal.PublicProfile" Size="AppStateStatic.Size">
                            @Button.Settings
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton Color="GetButtonColor(GalleryValid)" StartIcon="@GetButtonIcon(GalleryValid)" Variant="Variant.Filled" Href="/profile/gallery"
                                   Style="width: 100%;" Disabled="profile == null || profile.Gallery?.Type == GalleryType.BlindDate || principal == null || principal.PublicProfile" Size="AppStateStatic.Size">
                            @Button.Gallery
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudButton Color="GetButtonColor(ValidationsValid)" StartIcon="@GetButtonIcon(ValidationsValid)" Variant="Variant.Filled" Href="/profile/validation"
                                   Style="width: 100%;" Disabled="profile == null || profile.Gallery?.Type == GalleryType.BlindDate" Size="AppStateStatic.Size">
                            @Button.Validations
                        </MudButton>
                    </MudItem>
                    <MudItem xs="6">
                        <MudToggleGroup T="bool" SelectionMode="SelectionMode.SingleSelection" Value="@(principal?.PublicProfile ?? false)" ValueChanged="(bool value) => IsPublicChanged(value)"
                                        CheckMark="true" FixedContent="true" Disabled="principal == null" Size="AppStateStatic.Size">
                            <MudToggleItem Value="false" Text="@Resources.Translations.Private" SelectedIcon="@IconsFA.Solid.Icon("eye-slash").Font" UnselectedIcon="@IconsFA.Solid.Icon("eye-slash").Font" />
                            <MudToggleItem Value="true" Text="@Resources.Translations.Public" SelectedIcon="@IconsFA.Solid.Icon("eye").Font" UnselectedIcon="@IconsFA.Solid.Icon("eye").Font" />
                        </MudToggleGroup>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    </MudItem>
    <MudItem xs="12" sm="6" md="8">
        <PageSection Icon="@IconsFA.Solid.Icon("thumbs-up").Font" Title="@CardHeader.Suggestions">
            <ActionFragment>
                <MudTooltip Text="Generate new suggestion list">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="true" Size="AppStateStatic.Size">
                        @Button.Generate
                    </MudButton>
                </MudTooltip>
            </ActionFragment>
            <BodyFragment>
                <RenderControl Core="CoreSuggestions" Model="Suggestions" ExpressionEmpty="(List<string> lst) => lst.Empty()" PrivateContent="true" PremiumFeature="true"
                               PremiumDescription="Only available in phase 2">
                    <div id="@SuggestionsSwiperId" class="swiper mb-2">
                        <div class="swiper-wrapper">
                            @foreach (var item in Suggestions)
                            {
                                <div class="swiper-slide">
                                </div>
                            }
                        </div>
                        <div class="swiper-button-next"></div>
                        <div class="swiper-button-prev"></div>
                    </div>
                </RenderControl>
            </BodyFragment>
        </PageSection>
        <PageSection Icon="@IconsFA.Solid.Icon("heart-circle-exclamation").Font" Title="@CardHeader.Likes">
            <ActionFragment>
                <MudTooltip Text="Invite someone by email">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="InviteHandle" Disabled="profile == null" Size="AppStateStatic.Size">
                        @Button.InvitePartner
                    </MudButton>
                </MudTooltip>
            </ActionFragment>
            <BodyFragment>
                <RenderControl Core="CoreLikes" Model="MyLikes" ExpressionEmpty="(MyLikesModel? obj) => obj == null || obj.Items.Empty()" PrivateContent="true">
                    <div id="@LikesSwiperId" class="swiper mb-2">
                        <div class="swiper-wrapper">
                            @foreach (var item in MyLikes?.Items ?? [])
                            {
                                <div class="swiper-slide" style="height: auto !important;">
                                    <div style="position: relative; cursor: pointer;"
                                         @onclick="@(async () => await DialogService!.OpenPopupProfile(IsAuthenticated, MM.Shared.Enums.Origin.Like, UserId, item.UserId))">
                                        <MudChip T="string" Color="Color.Info" Label="true" Style="padding: 0.2rem; position: absolute; top: 0; left: 0; height: auto; z-index: 1;" Size="AppStateStatic.Size">
                                            @item.UserName
                                        </MudChip>
                                        <MudImage Src="@item.GetUserPhoto()" FallbackSrc="images/no-image.png" Alt="@item.UserName"
                                                  Fluid="true" ObjectFit="ObjectFit.Contain" Style="vertical-align: bottom;"></MudImage>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="swiper-button-next"></div>
                        <div class="swiper-button-prev"></div>
                    </div>
                </RenderControl>
            </BodyFragment>
        </PageSection>
        <PageSection Icon="@IconsFA.Solid.Icon("heart-circle-check").Font" Title="@CardHeader.Matches">
            <ActionFragment>
                @if (MyMatches == null || MyMatches.Items.Empty())
                {
                    <MudTooltip Text="Simulate matches to learn about our compatibility system">
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="SimulateMatches" Disabled="profile == null" Size="AppStateStatic.Size">
                            @Button.Simulate
                        </MudButton>
                    </MudTooltip>
                }
            </ActionFragment>
            <BodyFragment>
                <RenderControl Core="CoreMatches" Model="MyMatches" ExpressionEmpty="(MyMatchesModel? obj) => obj == null || obj.Items.Empty()" PrivateContent="true">
                    <div id="@MatchesSwiperId" class="swiper mb-2">
                        <div class="swiper-wrapper">
                            @foreach (var item in MyMatches?.Items ?? [])
                            {
                                <div class="swiper-slide" style="height: auto !important;">
                                    <div style="position: relative; cursor: pointer;"
                                         @onclick="@(async () => await DialogService!.OpenPopupProfile(IsAuthenticated, MM.Shared.Enums.Origin.Match, UserId, item.UserId, fakeProfiles.SingleOrDefault(s => s.Id == item.UserId)))">
                                        <MudChip T="string" Color="Color.Info" Label="true" Style="padding: 0.2rem; position: absolute; top: 0; left: 0; height: auto; z-index: 1;" Size="AppStateStatic.Size">
                                            @item.UserName
                                        </MudChip>
                                        <MudImage Src="@item.GetUserPhoto()" FallbackSrc="images/no-image.png" Alt="@item.UserName"
                                                  Fluid="true" ObjectFit="ObjectFit.Contain" Style="vertical-align: bottom;"></MudImage>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="swiper-button-next"></div>
                        <div class="swiper-button-prev"></div>
                    </div>
                </RenderControl>
            </BodyFragment>
        </PageSection>
    </MudItem>
</MudGrid>

@code
{
    private AuthPrincipal? principal;

    private ProfileValidation ProfileValidator { get; } = new();
    private ProfileModel? profile;

    private HashSet<ProfileModel> fakeProfiles { get; set; } = [];
    private RenderControlCore<ProfileModel?>? CoreProfile { get; } = new();

    private FilterValidation FilterValidator { get; } = new();
    private FilterModel? filter;
    private RenderControlCore<FilterModel?>? CoreFilter { get; } = new();

    private PhotoValidation PhotoValidator { get; } = new();

    private SettingModel? setting;
    private RenderControlCore<SettingModel?>? CoreSetting { get; } = new();

    private ValidationModel? validation;

    private List<string> Suggestions { get; } = [];
    private RenderControlCore<List<string>>? CoreSuggestions { get; } = new();

    private MyLikesModel? MyLikes { get; set; }
    private RenderControlCore<MyLikesModel?>? CoreLikes { get; } = new();

    private MyMatchesModel? MyMatches { get; set; }
    private RenderControlCore<MyMatchesModel?>? CoreMatches { get; } = new();

    private readonly string SuggestionsSwiperId = $"swiper-{Guid.NewGuid()}";
    private readonly string LikesSwiperId = $"swiper-{Guid.NewGuid()}";
    private readonly string MatchesSwiperId = $"swiper-{Guid.NewGuid()}";

    private bool ProfileValid => profile != null && ProfileValidator.Validate(profile, options => options.IncludeAllRuleSets()).IsValid;
    private bool FilterValid => filter != null && FilterValidator.Validate(filter).IsValid;
    private bool SettingValid => setting != null;
    private bool GalleryValid => profile?.Gallery != null && PhotoValidator.Validate(profile.Gallery).IsValid;
    private bool ValidationsValid => validation != null && validation.Gallery;

    protected override void OnInitialized()
    {
        ProfileApi.DataChanged += model =>
        {
            profile = model;
            StateHasChanged();
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (AppStateStatic.IsAuthenticated)
        // {
        //     var subscription = await GetLocalStorage("subscription-popup");

        //     if (subscription.Empty())
        //     {
        //         await DialogService.SubscriptionPopup(AppStateStatic.IsAuthenticated);
        //         await SetLocalStorage("subscription-popup", true.ToString().ToLower());
        //     }
        // }

        await JsRuntime.InvokeVoidAsync("initSwiper", SuggestionsSwiperId);
        await JsRuntime.InvokeVoidAsync("initSwiper", LikesSwiperId);
        await JsRuntime.InvokeVoidAsync("initSwiper", MatchesSwiperId);

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        try
        {
            if (IsAuthenticated)
            {
                profile = await ProfileApi.Get(CoreProfile);
                principal = await PrincipalApi.Get(true);
                filter = await FilterApi.Get(CoreFilter);
                setting = await SettingApi.Get(CoreSetting);
                validation = await ValidationApi.Get(null);
            }

            CoreSuggestions?.LoadingFinished?.Invoke(Suggestions);

            await LoadLikes();
            await LoadMatches();
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

    private Color GetButtonColor(bool valid)
    {
        return valid ? Color.Success : Color.Warning;
    }

    private string GetButtonIcon(bool valid)
    {
        return valid ? IconsFA.Solid.Icon("check").Font : IconsFA.Solid.Icon("circle-question").Font;
    }

    private async Task LoadLikes(bool setNewVersion = false)
    {
        MyLikes = await MyLikesApi.Get(CoreLikes, IsAuthenticated, setNewVersion);
        CoreLikes?.LoadingFinished?.Invoke(MyLikes);
    }

    private async Task LoadMatches(bool setNewVersion = false)
    {
        MyMatches = await MyMatchesApi.Get(CoreMatches, IsAuthenticated, setNewVersion);
        CoreMatches?.LoadingFinished?.Invoke(MyMatches);
    }

    private async Task IsPublicChanged(bool value)
    {
        if (value)
        {
            if (!ProfileValid || !FilterValid || !SettingValid || !GalleryValid || !ValidationsValid)
            {
                await ShowWarning(GlobalTranslations.CompleteAllSteps);
            }
            else
            {
                principal = await PrincipalApi.Public();
                await ShowSuccess(GlobalTranslations.ProfilePublicMode);
            }
        }
        else
        {
            principal = await PrincipalApi.Private();
            await ShowSuccess(GlobalTranslations.ProfilePrivateMode);
        }
    }

    private async Task InviteHandle()
    {
        var principal = await PrincipalApi.Get(IsAuthenticated);
        await DialogService.InvitePerEmail(principal, new EventCallbackFactory().Create(this, async (string email) => await InvitationSent(email)));
    }

    private async Task InvitationSent(string email)
    {
        try
        {
            await InviteApi.SendInvite(new InviteRequest { Email = email });

            await ShowSuccess(GlobalTranslations.InvitationSent);
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

    private async Task SimulateMatches()
    {
        if (await DialogService.ShowMessageBox(GlobalTranslations.Confirmation, GlobalTranslations.GenerateSimulation, Button.Ok, Button.Cancel) ?? false)
        {
            MyMatches = new MyMatchesModel();

            var languages = EnumHelper.GetArray<Language>();

            fakeProfiles = new Faker<ProfileModel>()
                .RuleFor(x => x.Id, f => f.Random.Guid().ToString())
                .RuleFor(u => u.Gallery, f => new ProfileGalleryModel { FaceId = $"https://api.dicebear.com/9.x/avataaars/svg?size=300&seed=example={f.Random.Guid().ToString()}" })
                //BASIC
                .RuleFor(x => x.NickName, f => f.Name.FirstName())
                .RuleFor(x => x.Description, f => f.Lorem.Text())
                .RuleFor(x => x.Nationality, f => f.PickRandom<Country>())
                .RuleFor(x => x.Country, f => f.Address.Country())
                .RuleFor(x => x.State, f => f.Address.County())
                .RuleFor(x => x.City, f => f.Address.City())
                .RuleFor(x => x.Languages, f => f.Random.EnumValues<Language>(f.Random.Int(1, 3)).ToHashSet())
                .RuleFor(x => x.MaritalStatus, f => f.PickRandom<MaritalStatus>())
                .RuleFor(x => x.BiologicalSex, f => f.PickRandom<BiologicalSex>())
                .RuleFor(x => x.GenderIdentities, f => f.Random.EnumValues<GenderIdentity>(f.Random.Int(1, 2)).ToHashSet())
                .RuleFor(x => x.SexualOrientations, f => f.Random.EnumValues<SexualOrientation>(f.Random.Int(1, 2)).ToHashSet())
                //BIO
                .RuleFor(x => x.Ethnicity, f => f.PickRandom<Ethnicity>())
                .RuleFor(x => x.BodyType, f => f.PickRandom<BodyType>())
                .RuleFor(x => x.BirthDate, f => f.Date.Between(DateTime.Now.AddYears(-80), DateTime.Now.AddYears(-19)))
                .RuleFor(x => x.Age, f => f.Random.Int(18, 80))
                .RuleFor(x => x.Height, f => f.PickRandom<Height>())
                .RuleFor(x => x.Neurodiversity, f => f.PickRandom<Neurodiversity>())
                .RuleFor(x => x.Disabilities, f => f.Random.EnumValues<Disability>(f.Random.Int(0, 1)).ToHashSet())
                //LIFESTYLE
                .RuleFor(x => x.Drink, f => f.PickRandom<Drink>())
                .RuleFor(x => x.Smoke, f => f.PickRandom<Smoke>())
                .RuleFor(x => x.Diet, f => f.PickRandom<Diet>())
                .RuleFor(x => x.Religion, f => f.PickRandom<Religion>())
                .RuleFor(x => x.FamilyInvolvement, f => f.PickRandom<FamilyInvolvement>())
                .RuleFor(x => x.HaveChildren, f => f.PickRandom<HaveChildren>())
                .RuleFor(x => x.HavePets, f => f.PickRandom<HavePets>())
                .RuleFor(x => x.EducationLevel, f => f.PickRandom<EducationLevel>())
                .RuleFor(x => x.CareerCluster, f => f.PickRandom<CareerCluster>())
                .RuleFor(x => x.LivingSituation, f => f.PickRandom<LivingSituation>())
                .RuleFor(x => x.TravelFrequency, f => f.PickRandom<TravelFrequency>())
                .RuleFor(x => x.NetWorth, f => f.PickRandom<NetWorth>())
                .RuleFor(x => x.AnnualIncome, f => f.PickRandom<AnnualIncome>())
                //PERSONALITY
                .RuleFor(x => x.MoneyPersonality, f => f.PickRandom<MoneyPersonality>())
                .RuleFor(x => x.SharedSpendingStyle, f => f.PickRandom<SharedSpendingStyle>())
                .RuleFor(x => x.RelationshipPersonality, f => f.PickRandom<RelationshipPersonality>())
                .RuleFor(x => x.MBTI, f => f.PickRandom<MyersBriggsTypeIndicator>())
                .RuleFor(x => x.LoveLanguage, f => f.PickRandom<LoveLanguage>())
                .RuleFor(x => x.SexPersonality, f => f.PickRandom<SexPersonality>())
                .RuleFor(x => x.SexPersonalityPreference, f => f.Random.EnumValues<SexPersonality>(f.Random.Int(1, 3)).ToHashSet())
                //INTEREST
                .RuleFor(x => x.Food, f => f.Random.EnumValues<Food>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.Vacation, f => f.Random.EnumValues<Vacation>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.Sports, f => f.Random.EnumValues<Sports>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.LeisureActivities, f => f.Random.EnumValues<LeisureActivities>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.MusicGenre, f => f.Random.EnumValues<MusicGenre>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.MovieGenre, f => f.Random.EnumValues<MovieGenre>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.TVGenre, f => f.Random.EnumValues<TVGenre>(f.Random.Int(0, 3)).ToHashSet())
                .RuleFor(x => x.ReadingGenre, f => f.Random.EnumValues<ReadingGenre>(f.Random.Int(0, 3)).ToHashSet())
                //RELATIONSHIP
                .RuleFor(x => x.SharedFinances, f => f.PickRandom<SharedFinances>())
                .RuleFor(x => x.ConflictResolutionStyle, f => f.PickRandom<ConflictResolutionStyle>())
                .RuleFor(x => x.HouseholdManagement, f => f.PickRandom<HouseholdManagement>())
                .RuleFor(x => x.TimeTogetherPreference, f => f.PickRandom<TimeTogetherPreference>())
                .RuleFor(x => x.OppositeSexFriendships, f => f.PickRandom<OppositeSexFriendships>())
                //GOAL
                .RuleFor(x => x.RelationshipIntentions, f => f.Random.EnumValues<RelationshipIntention>(f.Random.Int(1, 2)).ToHashSet())
                .RuleFor(x => x.WantChildren, f => f.PickRandom<WantChildren>())
                .RuleFor(x => x.Relocation, f => f.PickRandom<Relocation>())
                .RuleFor(x => x.IdealPlaceToLive, f => f.PickRandom<IdealPlaceToLive>())
                .GenerateLazy(8).ToHashSet();

            MyMatches.Items = fakeProfiles.Select(s =>
                new PersonModel { UserId = s.Id, UserName = s.NickName, UserPhoto = s.Gallery?.FaceId, Fake = true }).ToHashSet();

            CoreMatches?.LoadingFinished?.Invoke(MyMatches);
        }
    }

    private void Login()
    {
        Navigation.NavigateToLogin("/authentication/login");
    }

    // private string GetSuggestionTitle()
    // {
    //     if (profile?.Preference?.Region == null) return "";

    //     switch (profile.Preference.Region)
    //     {
    //         case Region.City:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.City)}";
    //         case Region.State:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.State)}";
    //         case Region.Country:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.Country)}";
    //         case Region.World:
    //             return $"{profile.Preference.Region.GetName()}";
    //         default:
    //             return "";
    //     }
    // }
}
