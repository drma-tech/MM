@page "/profile"

@using FluentValidation
@using MM.Shared.Models.Profile;
@using MM.Shared.Models.Profile.Core
@using MM.WEB.Modules.Profile.Components
@using MM.WEB.Modules.Profile.Core;
@attribute [Authorize]
@inherits PageCore<Profile>

@inject ProfileApi ProfileApi

<SeoHeader Title="Profile" Url="/profile"></SeoHeader>

@if (IsAuthenticated)
{
    <ProfileHeader></ProfileHeader>
}

<Row Margin="Margin.Is2.FromBottom">
    <Column ColumnSize="ColumnSize.IsAuto">
        <Button Color="Color.Primary" Outline="true" Type="ButtonType.Link" To="/profile/data">
            @if (profile != null && ProfileValidator.Validate(profile, options => options.IncludeAllRuleSets()).IsValid)
            {
                <Blazorise.Icon Name="FontAwesomeIcons.CheckCircle" TextColor="TextColor.Success"></Blazorise.Icon> <span>Profile</span>
            }
            else
            {
                <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Warning"></Blazorise.Icon> <span>Profile</span>
            }
        </Button>
        <Button Color="Color.Primary" Outline="true" Type="ButtonType.Link" To="/profile/filter">
            @if (filter != null && FilterValidator.Validate(filter).IsValid)
            {
                <Blazorise.Icon Name="FontAwesomeIcons.CheckCircle" TextColor="TextColor.Success"></Blazorise.Icon> <span>Filters</span>
            }
            else
            {
                <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Warning"></Blazorise.Icon> <span>Filters</span>
            }
        </Button>
        <Button Color="Color.Primary" Outline="true" Type="ButtonType.Link" To="/profile/setting">
            @if (false)
            {
                <Blazorise.Icon Name="FontAwesomeIcons.CheckCircle" TextColor="TextColor.Success"></Blazorise.Icon> <span>Settings</span>
            }
            else
            {
                <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Warning"></Blazorise.Icon> <span>Settings</span>
            }
        </Button>
        <Button Color="Color.Primary" Outline="true" Type="ButtonType.Link" To="/profile/photo" Disabled="true">
            @if (false)
            {
                <Blazorise.Icon Name="FontAwesomeIcons.CheckCircle" TextColor="TextColor.Success"></Blazorise.Icon> <span>Photos</span>
            }
            else
            {
                <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Warning"></Blazorise.Icon> <span>Photos</span>
            }
        </Button>
        <Button Color="Color.Primary" Outline="true" Type="ButtonType.Link" To="/profile/validation" Disabled="true">
            @if (false)
            {
                <Blazorise.Icon Name="FontAwesomeIcons.CheckCircle" TextColor="TextColor.Success"></Blazorise.Icon> <span>Validations</span>
            }
            else
            {
                <Blazorise.Icon Name="FontAwesomeIcons.QuestionCircle" TextColor="TextColor.Warning"></Blazorise.Icon> <span>Validations</span>
            }
        </Button>
    </Column>
    <Column ColumnSize="ColumnSize.IsAuto">
        <Switch Checked="@IsPublic" CheckedChanged="(bool value)=>IsPublicChanged(value)" Size="Size.Large" title="Activate your profile">
            @(IsPublic ? "Public" : "Private")
        </Switch>
    </Column>
</Row>

<HeaderComponent IconName="@FontAwesomeIcons.ThumbsUp" Title="Suggestions">
    <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Primary" title="Generate new suggestion list" Disabled="true">
        Generate
    </Button>
</HeaderComponent>
<RenderControl Core="CoreSuggestions" Model="Suggestions" ExpressionEmpty="((List<string> lst)=> lst.Empty())" PrivateContent="true" PremiumFeature="true">
    <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
        @foreach (var item in Suggestions)
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
            </Column>
        }
    </Row>
</RenderControl>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleExclamation" Title="Likes">
        </HeaderComponent>
        <RenderControl Core="CoreLikes" Model="Likes" ExpressionEmpty="((List<string> lst)=> lst.Empty())" PrivateContent="true">
            <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
                @foreach (var item in Likes)
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                    </Column>
                }
            </Row>
        </RenderControl>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleCheck" Title="Matches">
            <Button Float="Float.End" Size="Size.ExtraSmall" Color="Color.Danger" Clicked="SimulateMatches" title="Simulate matches (non-paying users only)">
                Simulate
            </Button>
        </HeaderComponent>
        <RenderControl Core="CoreMatches" Model="Matches" ExpressionEmpty="((List<string> lst)=> lst.Empty())" PrivateContent="true">
            <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
                @foreach (var item in Matches)
                {
                    <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                    </Column>
                }
            </Row>
        </RenderControl>
    </Column>
</Row>

@code
{
    public ProfileValidation ProfileValidator { get; set; } = new();
    public ProfileModel? profile;
    public RenderControlCore<ProfileModel?>? CoreProfile { get; set; } = new();

    public FilterValidation FilterValidator { get; set; } = new();
    public FilterModel? filter;

    public List<string> Suggestions { get; set; } = [];
    public RenderControlCore<List<string>>? CoreSuggestions { get; set; } = new();

    public List<string> Likes { get; set; } = [];
    public RenderControlCore<List<string>>? CoreLikes { get; set; } = new();

    public List<string> Matches { get; set; } = [];
    public RenderControlCore<List<string>>? CoreMatches { get; set; } = new();

    public bool IsPublic { get; set; }

    protected override async Task LoadDataRender()
    {
        try
        {
            if (IsAuthenticated)
            {
                profile = await ProfileApi.Get(CoreProfile);
            }

            CoreSuggestions?.LoadingFinished?.Invoke(Suggestions);
            CoreLikes?.LoadingFinished?.Invoke(Likes);
            CoreMatches?.LoadingFinished?.Invoke(Matches);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task IsPublicChanged(bool value)
    {
        if (value)
        {
            await Toast.Warning("To make your profile public, first complete all the steps");
            IsPublic = false;
        }
    }

    private async Task SimulateMatches()
    {
        if (await Message.Confirm("Do you want to generate a match simulation? This is just to demonstrate how our compatibility system works.", "Confirmation"))
        {
            Matches.Add("asd");
            CoreMatches?.LoadingFinished?.Invoke(Matches);
        }
    }

    // private string GetSuggestionTitle()
    // {
    //     if (profile?.Preference?.Region == null) return "";

    //     switch (profile.Preference.Region)
    //     {
    //         case Region.City:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.City)}";
    //         case Region.State:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.State)}";
    //         case Region.Country:
    //             return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.Country)}";
    //         case Region.World:
    //             return $"{profile.Preference.Region.GetName()}";
    //         default:
    //             return "";
    //     }
    // }
}