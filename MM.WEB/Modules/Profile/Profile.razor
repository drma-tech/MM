@page "/profile"

@using MM.Shared.Models.Profile;
@using MM.WEB.Modules.Profile.Components
@using MM.WEB.Modules.Profile.Core;
@attribute [Authorize]
@inherits PageCore<Profile>

@inject ProfileApi ProfileApi

<SeoHeader Title="Profile" Url="/profile"></SeoHeader>

@if (IsAuthenticated)
{
    <ProfileHeader></ProfileHeader>
}

<HeaderComponent IconName="@FontAwesomeIcons.Star" Title="Highlights">
</HeaderComponent>
<Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
    <RenderControl Core="CoreList" Model="Highlights" ExpressionEmpty="((List<string> lst)=> lst.Empty())" PrivateContent="false">
        @foreach (var item in Highlights)
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
            </Column>
        }
    </RenderControl>
</Row>

<HeaderComponent IconName="@FontAwesomeIcons.ThumbsUp" Title="Suggestions">
</HeaderComponent>
<Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
    <RenderControl Core="CoreList" Model="Suggestions" ExpressionEmpty="((List<string> lst)=> lst.Empty())" PrivateContent="false">
        @foreach (var item in Suggestions)
        {
            <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
            </Column>
        }
    </RenderControl>
</Row>

<Row HorizontalGutter="8" VerticalGutter="8">
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleExclamation" Title="Likes">
        </HeaderComponent>
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
            @foreach (var item in Likes)
            {
                <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                </Column>
            }
        </Row>
    </Column>
    <Column ColumnSize="ColumnSize.IsFull.OnMobile.IsHalf.OnDesktop">
        <HeaderComponent IconName="@FontAwesomeIcons.HeartCircleCheck" Title="Matches">
        </HeaderComponent>
        <Row HorizontalGutter="4" VerticalGutter="4" Margin="Margin.Is2.FromBottom">
            @foreach (var item in Matches)
            {
                <Column ColumnSize="ColumnSize.Is1.OnFullHD.Is2.OnDesktop.Is3.OnMobile">
                </Column>
            }
        </Row>
    </Column>
</Row>

@* <Row HorizontalGutter="8" VerticalGutter="0">
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnWidescreen.Is9.OnFullHD">

        <RenderControl Core="Core" Model="profile" ExpressionEmpty="((ProfileModel? obj)=> obj == null)">
            @if (profile?.Modality == Modality.Matchmaker)
            {

            }
            else if (profile?.Modality == Modality.RelationshipAnalysis)
            {
                <Alert Visible="true" Color="Color.Dark" Shadow="Shadow.Small"><AlertMessage>Seu Parceiro (@(view?.NickName ?? "..."))</AlertMessage></Alert>

                <RenderControl Core="Core" Model="view" ExpressionEmpty="((ProfileModel? obj)=> obj == null)">
                    <Row HorizontalGutter="8" VerticalGutter="0">
                        <Column ColumnSize="ColumnSize.IsFull.OnDesktop.Is4.OnFullHD">
                            <Card Margin="Margin.Is2.FromBottom">
                                <CardBody Padding="Padding.Is0">
                                    @if (view != null)
                                    {
                                        <Carousel @bind-SelectedSlide="selectedImage" Autoplay="false" ShowControls="imageDataUriGallery.Count() > 1" ShowIndicators="imageDataUriGallery.Count() > 1">
                                            @foreach (var item in imageDataUriGallery)
                                            {
                                                <CarouselSlide @key="@item" Name="@item" Style="text-align: center; background-color: black;">
                                                    <Image Source="@item" Style="max-height: 450px !important;" />
                                                </CarouselSlide>
                                            }
                                        </Carousel>
                                    }
                                </CardBody>
                                <CardBody>
                                    @if (view != null)
                                    {

                                    }
                                </CardBody>
                            </Card>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsFull.OnDesktop.Is8.OnFullHD">
                            <CardCompatibility User="profile" View="view" Affinities="affinities"></CardCompatibility>
                        </Column>
                    </Row>
                </RenderControl>
            }
        </RenderControl>
    </Column>
</Row> *@

@code
{
    private ProfileModel? profile;
    public RenderControlCore<ProfileModel?>? CoreProfile { get; set; } = new();
    public RenderControlCore<List<string>>? CoreList { get; set; } = new();

    public List<string> Highlights { get; set; } = [];
    public List<string> Suggestions { get; set; } = [];
    public List<string> Likes { get; set; } = [];
    public List<string> Matches { get; set; } = [];

    private ProfileModel? view;
    private List<AffinityVM> affinities = new();

    string? selectedImage;
    string[] imageDataUriGallery = new string[] { };

    protected override async Task LoadDataRender()
    {
        try
        {
            if (IsAuthenticated)
            {
                profile = await ProfileApi.Get(CoreProfile);

                if (profile != null)
                {
                    if (profile.Modality == Modality.RelationshipAnalysis)
                    {
                        var partner = profile.Partners.FirstOrDefault(w => !string.IsNullOrEmpty(w.Id));
                    }
                    else
                    {

                    }

                    imageDataUriGallery = new string[] { profile.GetMainPhoto() }.Concat(profile.GetGalleryPhotos()).ToArray();

                    if (view != null)
                    {
                        affinities = AffinityCore.GetAffinity(profile, view);
                    }
                }
                else
                {
                    imageDataUriGallery = new string[] { ImageHelper.GetNoUserPhoto };
                }

                selectedImage = imageDataUriGallery.First();
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private string GetSuggestionTitle()
    {
        if (profile?.Preference?.Region == null) return "";

        switch (profile.Preference.Region)
        {
            case Region.City:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.City)}";
            case Region.State:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.State)}";
            case Region.Country:
                return $"{profile.Preference.Region.GetName()} - {profile?.GetLocation(ProfileModel.LocationType.Country)}";
            case Region.World:
                return $"{profile.Preference.Region.GetName()}";
            default:
                return "";
        }
    }
}