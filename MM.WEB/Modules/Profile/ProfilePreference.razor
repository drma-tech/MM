@page "/Profile/Preference"
@using MM.Shared.Models.Profile;
@using MM.WEB.Modules.Profile.Core;
@using MM.WEB.Modules.Shared.Popup;
@attribute [Authorize]
@inherits PageCore<ProfilePreference>

@inject ProfileApi ProfileApi

<RenderControl Core="Core" Model="profile" ExpressionEmpty="((ProfileModel? obj)=> obj == null || obj.Preference == null)" PrivateContent="true">
    <EditForm Model="@preference" OnValidSubmit="HandleValidSubmit">
        <FluentValidationValidator />
        <Div Margin="Margin.Is2.OnY">
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Basic)" Clicked="(() => ChangeOrder(Tabs.Basic))">@MM.Shared.Enums.Resources.Section.Basic</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Bio)" Clicked="(() => ChangeOrder(Tabs.Bio))">@MM.Shared.Enums.Resources.Section.Bio</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Lifestyle)" Clicked="(() => ChangeOrder(Tabs.Lifestyle))">@MM.Shared.Enums.Resources.Section.Lifestyle</Button>
            <Button Margin="Margin.Is1.FromBottom" Color="Color.Secondary" Outline="!(SelectedTab == Tabs.Personality)" Clicked="(() => ChangeOrder(Tabs.Personality))">@MM.Shared.Enums.Resources.Section.Personality</Button>
        </Div>

        @if (preference != null)
        {
            @if (SelectedTab == Tabs.Basic)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.Region)" TValue="Region" TEnum="Region" @bind-SelectedValue="@preference.Region"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.MapMarkedAlt" ShowHelper="false" Required="true" CustomInfo="@($"{GlobalTranslations.YourCurrentLocation} {profile?.Location}")"></FieldSelect>
                        <FieldSelect For="@(() => preference.Change)" TValue="Change" TEnum="Change" @bind-SelectedValue="@preference.Change"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Truck" Required="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.Languages)" TValue="IReadOnlyList<Language>" TEnum="Language" @bind-SelectedValues="@preference.Languages"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Language" Multiple="true"></FieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.CurrentSituation)" TValue="IReadOnlyList<CurrentSituation>" TEnum="CurrentSituation" @bind-SelectedValues="@preference.CurrentSituation"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Heart" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.BiologicalSex)" TValue="IReadOnlyList<BiologicalSex>" TEnum="BiologicalSex" @bind-SelectedValues="@preference.BiologicalSex"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.GenderIdentity)" TValue="IReadOnlyList<GenderIdentity>" TEnum="GenderIdentity" @bind-SelectedValues="@preference.GenderIdentity"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" ShowGroup="true" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.SexualOrientation)" TValue="IReadOnlyList<SexualOrientation>" TEnum="SexualOrientation" @bind-SelectedValues="@preference.SexualOrientation"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Neuter" Multiple="true"></FieldSelect>
                    </Column>
                </Row>
            }
            else if (SelectedTab == Tabs.Bio)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.RaceCategory)" TValue="IReadOnlyList<RaceCategory>" TEnum="RaceCategory" @bind-SelectedValues="@preference.RaceCategory"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Globe" Multiple="true"></FieldSelect>

                        <FieldSelect For="@(() => preference.BodyMass)" TValue="IReadOnlyList<BodyMass>" TEnum="BodyMass" @bind-SelectedValues="@preference.BodyMass"
                                     CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Weight" Multiple="true"></FieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <Blazorise.Icon Name="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.BirthdayCake"></Blazorise.Icon> @CustomAttributeHelper.GetCustomAttribute(() => preference.MinimalAge)?.Name
                                <div style="color: red; display: initial;"> *</div>
                                <FieldHelp Style="color: #17a2b8 !important">@CustomAttributeHelper.GetCustomAttribute(() => preference.MinimalAge)?.Description</FieldHelp>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <NumericEdit @bind-Value="@preference.MinimalAge" Min="18"></NumericEdit>
                                <ValidationMessage For="@(() => preference.MinimalAge)"></ValidationMessage>
                            </FieldBody>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <NumericEdit @bind-Value="@preference.MaxAge"></NumericEdit>
                                <ValidationMessage For="@(() => preference.MaxAge)"></ValidationMessage>
                            </FieldBody>
                        </Field>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.IsFull.OnWidescreen.Is4.OnFullHD">
                                <Blazorise.Icon Name="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.Ruler"></Blazorise.Icon> @CustomAttributeHelper.GetCustomAttribute(() => preference.MinimalHeight)?.Name
                                <div style="color: red; display: initial;"> *</div>
                            </FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <InputSelect TValue="MM.Shared.Enums.Height?" @bind-Value="@preference.MinimalHeight" @attributes="@(new Dictionary<string, object>() { { "class", "form-control" } })">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<MM.Shared.Enums.Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => preference.MinimalHeight)"></ValidationMessage>
                            </FieldBody>
                            <FieldBody ColumnSize="ColumnSize.IsHalf.Is4.OnFullHD">
                                <InputSelect TValue="MM.Shared.Enums.Height?" @bind-Value="@preference.MaxHeight" @attributes="@(new Dictionary<string, object>() { { "class", "form-control" } })">
                                    <option></option>
                                    @foreach (var item in EnumHelper.GetArray<MM.Shared.Enums.Height>())
                                    {
                                        <option value="@item">@item.GetName()</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => preference.MaxHeight)"></ValidationMessage>
                            </FieldBody>
                        </Field>
                    </Column>
                </Row>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.Neurodiversities)" TValue="IReadOnlyList<Neurodiversity>" TEnum="Neurodiversity" @bind-SelectedValues="@preference.Neurodiversities"
                                     CssIcon="@FontAwesomeIcons.Brain" Multiple="true"></FieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.Disabilities)" TValue="IReadOnlyList<Disability>" TEnum="Disability" @bind-SelectedValues="@preference.Disabilities"
                                     CssIcon="@FontAwesomeIcons.Wheelchair" Multiple="true"></FieldSelect>
                    </Column>
                </Row>
            }
            else if (SelectedTab == Tabs.Lifestyle)
            {
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.Drink)" TValue="IReadOnlyList<Drink>" TEnum="Drink" @bind-SelectedValues="@preference.Drink"
                                     CssIcon="@FontAwesomeIcons.GlassCheers" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.Smoke)" TValue="IReadOnlyList<Smoke>" TEnum="Smoke" @bind-SelectedValues="@preference.Smoke"
                                     CssIcon="@FontAwesomeIcons.Smoking" ShowHelper="false" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.Diet)" TValue="IReadOnlyList<Diet>" TEnum="Diet" @bind-SelectedValues="@preference.Diet"
                                     CssIcon="@FontAwesomeIcons.Utensils" Multiple="true" ShowDescription="false"></FieldSelect>
                        <FieldSelect For="@(() => preference.Religion)" TValue="IReadOnlyList<Religion>" TEnum="Religion" @bind-SelectedValues="@preference.Religion"
                                     CssIcon="@FontAwesomeIcons.PrayingHands" Multiple="true"></FieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.HaveChildren)" TValue="IReadOnlyList<HaveChildren>" TEnum="HaveChildren" @bind-SelectedValues="@preference.HaveChildren"
                                     CssIcon="@FontAwesomeIcons.Child" ShowHelper="false" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.WantChildren)" TValue="IReadOnlyList<WantChildren>" TEnum="WantChildren" @bind-SelectedValues="@preference.WantChildren"
                                     CssIcon="@FontAwesomeIcons.Baby" ShowHelper="false" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.EducationLevel)" TValue="IReadOnlyList<EducationLevel>" TEnum="EducationLevel" @bind-SelectedValues="@preference.EducationLevel"
                                     CssIcon="@FontAwesomeIcons.GraduationCap" ShowHelper="false" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.CareerCluster)" TValue="IReadOnlyList<CareerCluster>" TEnum="CareerCluster" @bind-SelectedValues="@preference.CareerCluster"
                                     CssIcon="@FontAwesomeIcons.Briefcase" ShowGroup="true" Multiple="true"></FieldSelect>
                        <FieldSelect For="@(() => preference.TravelFrequency)" TValue="IReadOnlyList<TravelFrequency>" TEnum="TravelFrequency" @bind-SelectedValues="@preference.TravelFrequency"
                                     CssIcon="@FontAwesomeIcons.Plane" ShowGroup="true" Multiple="true"></FieldSelect>
                    </Column>
                </Row>
            }
            else if (SelectedTab == Tabs.Personality)
            {
                <Alert Visible="true" Color="Color.Info">
                    <AlertDescription>@WEB.Resources.GlobalTranslations.ProfilePreferPersonTip1</AlertDescription>
                </Alert>
                <Row>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">
                        <FieldSelect For="@(() => preference.SexPersonality)" TValue="IReadOnlyList<SexPersonality>" TEnum="SexPersonality" @bind-SelectedValues="@preference.SexPersonality"
                                     CssIcon="@FontAwesomeIcons.Heart" Multiple="true"></FieldSelect>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is6.OnDesktop">

                    </Column>
                </Row>
            }
        }

        <Button Type="ButtonType.Submit" Color="Color.Primary" Margin="Margin.Is2.OnY">
            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Save"></Blazorise.Icon> @WEB.Resources.Button.Save
        </Button>
        <Button Color="Color.Success" Clicked="PopulateFields" Margin="Margin.Is2.OnY">
            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Magic"></Blazorise.Icon> @WEB.Resources.Button.Fill
        </Button>
        <Button Color="Color.Primary" Float="Float.End" Clicked="(()=>help?.ShowModal())" Margin="Margin.Is2.OnY">
            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> @WEB.Resources.Button.Help
        </Button>
    </EditForm>

    <BasicModal @ref="help" Title="@WEB.Resources.GlobalTranslations.HelpTitle">
        <ul style="margin-left: -10px;">
            <li>@WEB.Resources.GlobalTranslations.PreferHelpTopic1</li>
            <li>@WEB.Resources.GlobalTranslations.PreferHelpTopic2</li>
        </ul>
    </BasicModal>
</RenderControl>

@code {

    private ProfileModel? profile { get; set; }
    private ProfilePreferenceModel? preference { get; set; }
    public RenderControlCore<ProfileModel?>? Core { get; set; } = new();

    private BasicModal? help;

    // private Loading? Loading;

    //private Shared.modal.ProfileDataHelp<object> ProfileDataHelp;

    protected override async Task LoadDataRender()
    {
        // Loading?.Start();

        profile = await ProfileApi.Get(Core);

        if (profile == null)
        {
            await Toast.Warning("Favor, atualizar primeiro seu perfil");
            return;
        }

        preference = profile.Preference;

        if (preference == null)
        {
            preference = new();

            await PopulateFields();
        }

        // Loading?.Finish(preference == null);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            profile = await ProfileApi.UpdateLooking(Core, profile, preference);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task PopulateFields()
    {
        try
        {
            SmartLookingCore.PopulateFields(profile, preference);

            await Toast.Warning("Este processo está em constante evolução. Caso queira informar um erro ou melhoria, favor abrir um tiket no nosso suporte.", "Campos populados automaticamente");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private enum Tabs
    {
        Basic,
        Bio,
        Lifestyle,
        Personality
    }

    private Tabs SelectedTab = Tabs.Basic;

    private void ChangeOrder(Tabs tab)
    {
        SelectedTab = tab;
    }
    }
