@page "/profile/gallery"
@using MM.Shared.Models.Profile
@using MM.Shared.Requests
@using MM.WEB.Api
@using MM.WEB.Modules.Profile.Core
@using static ImageHelper
@using Button = MM.WEB.Resources.Button
@attribute [Authorize]
@inherits PageCore<ProfileGallery>

@inject ProfileApi ProfileApi
@inject StorageApi StorageApi

<MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Primary">Face Photo</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Style="padding: 0;">
                    <RenderControl Core="CoreProfile" Model="_profile" ExpressionEmpty="(ProfileModel? obj) => obj == null" PrivateContent="true">
                        <MudImage Src="@_profile?.GetPhoto(PhotoType.Face)" Fluid="true" ObjectFit="ObjectFit.Contain" Style="max-height: 300px !important;" />
                    </RenderControl>
                </MudCardContent>
                <MudCardActions Style="align-self: center;">
                    @if (_profile?.Gallery?.FaceId == null)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => SelectPicture(PhotoType.Face))" Class="me-2"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Add
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => SelectPicture(PhotoType.Face))" Class="me-2"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Update
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => DeletePhotoGallery(PhotoType.Face))"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Remove
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Primary">Body Photo</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Style="padding: 0;">
                    <RenderControl Core="CoreProfile" Model="_profile" ExpressionEmpty="(ProfileModel? obj) => obj == null" PrivateContent="true">
                        <MudImage Src="@_profile?.GetPhoto(PhotoType.Body)" Fluid="true" ObjectFit="ObjectFit.Contain" Style="max-height: 300px !important;" />
                    </RenderControl>
                </MudCardContent>
                <MudCardActions Style="align-self: center;">
                    @if (_profile?.Gallery?.BodyId == null)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => SelectPicture(PhotoType.Body))" Class="me-2"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Add
                        </MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => SelectPicture(PhotoType.Body))" Class="me-2"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Update
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => DeletePhotoGallery(PhotoType.Body))"
                                   Disabled="@(Principal == null || Principal.PublicProfile)">
                            @Button.Remove
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>

</MudStack>

<div class="d-flex mt-3">
    <MudButton StartIcon="@IconsFA.Solid.Icon("left-long").Font" Color="Color.Secondary" Variant="Variant.Filled" OnClick="GoProfile" Class="me-2">
        @Button.Back
    </MudButton>
</div>

<MudDialog @ref="@MudDialog" Style="width: 100%">
    <DialogContent>
        <MudList T="string" Dense="true">
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                Show who you are: To complete your profile, please add one clear face photo and one full-body photo. This helps others get to know you better!
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                No filters, just the real you: To keep things authentic, we only accept photos without filters. We want you to shine just as you are!
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                Use natural lighting: Photos in well-lit places (like outdoors or near a window) always look great and bring out your personality.
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                Keep your face visible: Choose photos where your face is clear and uncovered. Avoid sunglasses, hats, or anything that hides your expression.
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                Pick a tidy background: A clean, organized setting highlights you in the best way possible.
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                Smile and be yourself: A genuine smile makes a friendly, welcoming impression – show off your best self!
            </MudListItem>
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(async () => { await MudDialog!.CloseAsync(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

<FloatingButton StartIcon="@IconsFA.Solid.Icon("circle-exclamation").Font" Color="Color.Info" Side="Side.Right" Position="2"
                OnClick="async() => await MudDialog!.ShowAsync(GlobalTranslations.HelpTitle, PopupHelper.Options(MaxWidth.ExtraSmall))">
</FloatingButton>
<FloatingButton Template="Template.Back"></FloatingButton>

@code
{
    private ClientePrincipal? Principal { get; set; }
    private ProfileModel? _profile = new();
    public RenderControlCore<ProfileModel?>? CoreProfile { get; set; } = new();

    private MudDialog? MudDialog { get; set; }

    protected override async Task LoadDataRender()
    {
        _profile = await ProfileApi.Get(CoreProfile);
        Principal = await PrincipalApi.Get(IsAuthenticated);
    }

    private async Task SelectPicture(PhotoType photoType)
    {
        await DialogService.SelectPicturePopup(photoType,
            new EventCallbackFactory().Create(this, async ((PhotoType, byte[]) result) => await CroppedPictureChanged(result.Item1, result.Item2)));
    }

    private async Task DeletePhotoGallery(PhotoType type)
    {
        try
        {
            _profile = await StorageApi.DeletePhotoGallery(type);
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private async Task CroppedPictureChanged(PhotoType type, byte[] buffer)
    {
        try
        {
            var request = new PhotoRequest { PhotoType = type, Buffer = buffer };

            _profile = await StorageApi.UploadPhoto(request);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

    private void GoProfile()
    {
        Navigation.NavigateTo("profile");
    }
}