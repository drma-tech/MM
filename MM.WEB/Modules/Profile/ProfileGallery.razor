@page "/profile/photo"
@using Blazorise.Cropper
@using MM.Shared.Models.Profile
@using MM.Shared.Requests
@using MM.WEB.Api
@using MM.WEB.Modules.Profile.Core
@attribute [Authorize]
@inherits PageCore<ProfileGallery>

@inject ProfileApi ProfileApi
@inject StorageApi StorageApi

<Row HorizontalGutter="8" VerticalGutter="0">
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen" Margin="Margin.Is3.FromBottom">
        <Card>
            <CardHeader>
                Face Photo
            </CardHeader>
            <CardBody>
                <RenderControl Core="CoreProfile" Model="_profile" ExpressionEmpty="((ProfileModel? obj)=> obj == null)" PrivateContent="true">
                    <Figure Margin="Margin.Is0.Is2.FromBottom" Style="text-align: center; width: 100%; background-color: black;">
                        <FigureImage Margin="Margin.Is0" Source="@_profile?.GetPhoto(ImageHelper.PhotoType.Face)" AlternateText="No Picture" Style="max-height: 300px !important;" />
                    </Figure>
                </RenderControl>
            </CardBody>
            <CardFooter>
                @if (_profile?.Photo?.FaceId == null)
                {
                    <Button Color="Color.Primary">Add</Button>
                }
                else
                {
                    <Button Color="Color.Secondary">Change</Button>
                    <Button Color="Color.Danger">Remove</Button>
                }
            </CardFooter>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen" Margin="Margin.Is3.FromBottom">
        <Card>
            <CardHeader>
                Body Phto
            </CardHeader>
            <CardBody>
                <RenderControl Core="CoreProfile" Model="_profile" ExpressionEmpty="((ProfileModel? obj)=> obj == null)" PrivateContent="true">
                    <Figure Margin="Margin.Is0.Is2.FromBottom" Style="text-align: center; width: 100%; background-color: black;">
                        <FigureImage Margin="Margin.Is0" Source="@_profile?.GetPhoto(ImageHelper.PhotoType.Body)" AlternateText="No Picture" Style="max-height: 300px !important;" />
                    </Figure>
                </RenderControl>
            </CardBody>
            <CardFooter>
                @if (_profile?.Photo?.BodyId == null)
                {
                    <Button Color="Color.Primary" Clicked="@(()=>photo?.ShowModal())">Add</Button>
                }
                else
                {
                    <Button Color="Color.Secondary">Change</Button>
                    <Button Color="Color.Danger">Remove</Button>
                }
            </CardFooter>
        </Card>
    </Column>
</Row>

<Button Color="Color.Primary" Margin="Margin.Is2.OnY" Clicked="SaveHandle">
    <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon> @WEB.Resources.Button.Save
</Button>

<Div Float="Float.End" Margin="Margin.Is2.OnY">
    <Button Color="Color.Primary" Clicked="help!.ShowModal">
        <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon> @WEB.Resources.Button.Help
    </Button>
</Div>

<BasicModal @ref="help" Title="@WEB.Resources.GlobalTranslations.HelpTitle">
    <ul>
        <li>Show who you are: To complete your profile, please add one clear face photo and one full-body photo. This helps others get to know you better!</li>
        <li>No filters, just the real you: To keep things authentic, we only accept photos without filters. We want you to shine just as you are!</li>
        <li>Use natural lighting: Photos in well-lit places (like outdoors or near a window) always look great and bring out your personality.</li>
        <li>Keep your face visible: Choose photos where your face is clear and uncovered. Avoid sunglasses, hats, or anything that hides your expression.</li>
        <li>Pick a tidy background: A clean, organized setting highlights you in the best way possible.</li>
        <li>Smile and be yourself: A genuine smile makes a friendly, welcoming impression – show off your best self!</li>
    </ul>
</BasicModal>
<BasicModal @ref="@photo" Title="Picture" Size="ModalSize.Large">
    <Row Margin="Margin.Is2.FromBottom">
        <Column>
            <FilePicker Changed="OnFileChanged" Filter="image/*" MaxFileSize="MaxFileSize" AutoReset="true" DisableProgressReport="true" />
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is3">
            <Cropper @ref="cropper" Source="@TempPicture" SelectionChanged="@OnSelectionChanged" Style="width: 256px; height: 256px;"
                     SelectionOptions="@(new CropperSelectionOptions{ Zoomable = false, Resizable = false })" />
        </Column>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is3">
            <Button Color="Color.Primary" Clicked="@GetCroppedImage" Disabled="@cropButtonDisabled" Block="true" >Crop image</Button>
            <Button Color="Color.Secondary" Clicked="@ResetSelection" Disabled="@cropButtonDisabled" Block="true">Reset Selection</Button>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.OnMobile.Is3">
            <Image Source="@TempPictureResult" Border="Border.Is1" Style="width: 256px; height: 256px;" />
        </Column>
    </Row>
</BasicModal>

@code
{
    private ProfileModel? _profile = new();
    public RenderControlCore<ProfileModel?>? CoreProfile { get; set; } = new();

    private BasicModal? help;

    private BasicModal? photo;
    private Cropper? cropper;
    private string? TempPicture = null;
    private string? TempPictureResult = null;
    private bool cropButtonDisabled = true;

    int MaxFileSize { get; set; } = 1024 * 1024 * 4; // 4 MB

    protected override async Task LoadDataRender()
    {
        _profile = await ProfileApi.Get(CoreProfile);
    }

    private async Task SaveHandle()
    {
        if (_profile == null) throw new InvalidOperationException("profile is null");

        try
        {
            _profile = await ProfileApi.Update(CoreProfile, _profile);

            Navigation.NavigateTo("profile");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task<byte[]> GetBuffer(IFileEntry file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream(file.Size).ReadAsync(buffer);
        return buffer;
    }

    private void ShowPicture(IFileEntry file, byte[] buffer)
    {
        TempPicture = $"data:{file.Type};base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task OnFileChanged(FileChangedEventArgs e)
    {
        foreach (var file in e.Files)
        {
            if (file.Status == FileEntryStatus.Error)
            {
                await Toast.Error(file.ErrorMessage);
            }
            else if (file.Status == FileEntryStatus.ExceedsMaximumSize)
            {
                await Toast.Warning("File size is too large");
            }
            else if (file.Status == FileEntryStatus.Ready)
            {
                var buffer = await GetBuffer(file);
                ShowPicture(file, buffer);
            }
        }
    }

    // private async Task OnFileUpload(FileUploadEventArgs e)
    // {
    //     try
    //     {
    //         var buffer = await GetBuffer(e.File);

    //         ShowPicture(e.File, buffer);

    //         // var request = new PhotoRequest() { Buffer = buffer, PhotoType = ImageHelper.PhotoType.Face };

    //         // await StorageApi.UploadPhotoFace(request);

    //         // _profile = await ProfileApi.Get(null);
    //     }
    //     catch (Exception ex)
    //     {
    //         // imageDataUri = null;
    //         ex.ProcessException(Toast, Logger);
    //     }
    // }

    private Task OnSelectionChanged(CropperSelectionChangedEventArgs eventArgs)
    {
        if (eventArgs.Width != 0)
        {
            cropButtonDisabled = false;

            return InvokeAsync(StateHasChanged);
        }

        return Task.CompletedTask;
    }

    private async Task GetCroppedImage()
    {
        TempPictureResult = await cropper.CropAsBase64ImageAsync(new() { Width = 512, Height = 512 });
    }

    private async Task ResetSelection()
    {
        cropButtonDisabled = true;

        await cropper.ResetSelection();
    }

    private async Task DeletePhotoGallery()
    {
        try
        {
            // var fileName = System.IO.Path.GetFileName(selectedImage);
            // if (string.IsNullOrEmpty(fileName)) throw new InvalidOperationException("invalid fileName");

            // await Http.Storage_DeletePhotoGallery(fileName, SessionStorage, Toast);

            // imageDataUriGallery = imageDataUriGallery.Where(w => w != selectedImage).ToArray();

            // selectedImage = imageDataUriGallery?.FirstOrDefault();
            // StateHasChanged();
        }
        catch (Exception ex)
        {
            // imageDataUriGallery = Array.Empty<string>();
            ex.ProcessException(Toast, Logger);
        }
    }
}