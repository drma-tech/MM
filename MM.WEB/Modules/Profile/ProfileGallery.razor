@page "/profile/photo"
@using MM.Shared.Models.Profile
@using MM.WEB.Modules.Profile.Core
@attribute [Authorize]
@inherits PageCore<ProfileGallery>

@inject ProfileApi ProfileApi

<Row HorizontalGutter="8" VerticalGutter="0">
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is4.OnWidescreen" Margin="Margin.Is3.FromBottom">
        <Card>
            <CardHeader>
                Main Photo
                <Button Size="Size.ExtraSmall" Color="Color.Primary" Float="Float.End" Clicked="helpMain.ShowModal" title="Ajuda" Margin="Margin.Is2.FromStart">
                    <Blazorise.Icon Name="FontAwesomeIcons.ExclamationCircle"></Blazorise.Icon>
                </Button>
            </CardHeader>
            <CardBody>
                <Figure Margin="Margin.Is0.Is2.FromBottom" Style="text-align: center; width: 100%; background-color: black;">
                    <FigureImage Margin="Margin.Is0" Source="@imageDataUri" AlternateText="No User" Style="max-height: 450px !important;" />
                </Figure>
                <div class="custom-file">
                    <InputFile OnChange="@OnInputFileChange" @attributes="@GetAttributes()"></InputFile>
                    <label for="logo" class="custom-file-label">Escolher arquivo...</label>
                </div>
            </CardBody>
        </Card>
    </Column>
    <Column ColumnSize="ColumnSize.Is6.OnDesktop.Is8.OnWidescreen" Margin="Margin.Is3.FromBottom">
        <Card>
            <CardHeader>
                Gallery
            </CardHeader>
            <CardBody>
                <Carousel @bind-SelectedSlide="selectedImage" Autoplay="false" Margin="Margin.Is2.FromBottom">
                    @foreach (var item in imageDataUriGallery)
                    {
                        <CarouselSlide @key="@item" Name="@item" Style="text-align: center; background-color: black;">
                            <Image Source="@item" Style="height: 450px" />
                            <Button Color="Color.Danger" Style="position: absolute; right: 10px; top: 10px; z-index:2;" Clicked="DeletePhotoGallery">
                                <Blazorise.Icon Name="FontAwesomeIcons.Trash"></Blazorise.Icon>
                            </Button>
                        </CarouselSlide>
                    }
                </Carousel>
                <div class="custom-file">
                    <InputFile OnChange="@OnInputFileGalleryChange" @attributes="@GetAttributes()"></InputFile>
                    <label for="logo" class="custom-file-label">Escolher arquivo...</label>
                </div>
            </CardBody>
        </Card>
    </Column>
</Row>

<BasicModal @ref="helpMain" Title="Dicas para foto principal">
    <ul>
        <li>Show who you are: To complete your profile, please add one clear face photo and one full-body photo. This helps others get to know you better!</li>
        <li>No filters, just the real you: To keep things authentic, we only accept photos without filters. We want you to shine just as you are!</li>
        <li>Use natural lighting: Photos in well-lit places (like outdoors or near a window) always look great and bring out your personality.</li>
        <li>Keep your face visible: Choose photos where your face is clear and uncovered. Avoid sunglasses, hats, or anything that hides your expression.</li>
        <li>Pick a tidy background: A clean, organized setting highlights you in the best way possible.</li>
        <li>Smile and be yourself: A genuine smile makes a friendly, welcoming impression – show off your best self!</li>
    </ul>
</BasicModal>

@code
{
    private ProfileModel? _profile = new();
    public RenderControlCore<ProfileModel?>? CoreProfile { get; set; } = new();

    string? imageDataUri = ImageHelper.GetNoUserPhoto;

    private BasicModal? helpMain;

    string? selectedImage;
    string[] imageDataUriGallery = Array.Empty<string>();

    protected override async Task LoadDataRender()
    {
        _profile = await ProfileApi.Get(CoreProfile);

        if (_profile != null && _profile.Photo != null)
        {
            imageDataUri = _profile.GetMainPhoto();
            imageDataUriGallery = _profile.GetGalleryPhotos();
            selectedImage = imageDataUriGallery?.FirstOrDefault();
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            var maxAllowedFiles = 1;
            var format = "image/jpeg";

            // foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
            // {
            //     var resizedImageFile = await imageFile.RequestImageFileAsync(format, 480, 480);
            //     var buffer = new byte[resizedImageFile.Size];
            //     await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            //     imageDataUri = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            //     if (ImageHelper.ValidImage(buffer))
            //     {
            //         await Http.Storage_UploadPhotoFace(buffer, SessionStorage, Toast);

            //         _profile = await Http.Profile_Get(SessionStorage);
            //     }
            //     else
            //     {
            //         imageDataUri = null;
            //         await Toast.Error("Foto inválida, favor tentar novamente");
            //     }
            // }
        }
        catch (Exception ex)
        {
            imageDataUri = null;
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task OnInputFileGalleryChange(InputFileChangeEventArgs e)
    {
        try
        {
            var maxAllowedFiles = 3;
            var format = "image/jpeg";
            var buffers = new List<byte[]>();

            foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
            {
                var resizedImageFile = await imageFile.RequestImageFileAsync(format, 480, 480);
                var buffer = new byte[resizedImageFile.Size];
                await resizedImageFile.OpenReadStream().ReadAsync(buffer);
                imageDataUriGallery = imageDataUriGallery.Concat(new string[] { $"data:{format};base64,{Convert.ToBase64String(buffer)}" }).ToArray();

                if (ImageHelper.ValidImage(buffer))
                {
                    buffers.Add(buffer);
                }
                else
                {
                    imageDataUriGallery = Array.Empty<string>();
                    await Toast.Error("Foto inválida, favor tentar novamente");
                }
            }

            // if (imageDataUriGallery.Any())
            // {
            //     await Http.Storage_UploadPhotoGallery(buffers, SessionStorage, Toast);

            //     _profile = await Http.Profile_Get(SessionStorage);

            //     selectedImage = imageDataUriGallery?.LastOrDefault();
            //     StateHasChanged();
            // }
        }
        catch (Exception ex)
        {
            imageDataUriGallery = Array.Empty<string>();
            ex.ProcessException(Toast, Logger);
        }
    }

    private async Task DeletePhotoGallery()
    {
        try
        {
            // var fileName = System.IO.Path.GetFileName(selectedImage);
            // if (string.IsNullOrEmpty(fileName)) throw new InvalidOperationException("invalid fileName");

            // await Http.Storage_DeletePhotoGallery(fileName, SessionStorage, Toast);

            // imageDataUriGallery = imageDataUriGallery.Where(w => w != selectedImage).ToArray();

            // selectedImage = imageDataUriGallery?.FirstOrDefault();
            // StateHasChanged();
        }
        catch (Exception ex)
        {
            imageDataUriGallery = Array.Empty<string>();
            ex.ProcessException(Toast, Logger);
        }
    }

    public static Dictionary<string, object> GetAttributes()
    {
        return new Dictionary<string, object>() { { "class", "custom-file-input" }, { "accept", "image/*" } };
    }
}