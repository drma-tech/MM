@page "/profile/validation"

@attribute [Authorize]
@using MM.Shared.Models.Profile
@using MM.Shared.Models.Profile.Core
@using MM.WEB.Api
@using MM.WEB.Modules.Profile.Core
@using Button = MM.WEB.Resources.Button
@inherits PageCore<Validations>

@inject ValidationApi ValidationApi
@inject ProfileApi ProfileApi
@inject StorageApi StorageApi

<RenderControl Core="Core" Model="Validation" ExpressionEmpty="(ValidationModel? obj) => obj == null" PrivateContent="true">
    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
        <MudGrid>
            <MudItem xs="12">
                <FieldActive For="@(() => Validation!.Gallery)" @bind-Value="@Validation!.Gallery" CssIcon="@IconsFA.Solid.Icon("images").Font"></FieldActive>
            </MudItem>
            <MudItem xs="12">
                <FieldActive For="@(() => Validation!.Identity)" @bind-Value="@Validation!.Identity" CssIcon="@IconsFA.Solid.Icon("id-card").Font"
                             Disabled="true" CustomButtonText="Only available in phase 2">
                </FieldActive>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12">
                <FieldActive For="@(() => Validation!.NetWorth)" @bind-Value="@Validation!.NetWorth" CssIcon="@IconsFA.Solid.Icon("gem").Font"
                             Disabled="true" CustomButtonText="Only available in phase 3">
                </FieldActive>
            </MudItem>
            <MudItem xs="12">
                <FieldActive For="@(() => Validation!.AnnualIncome)" @bind-Value="@Validation!.AnnualIncome" CssIcon="@IconsFA.Solid.Icon("money-bill").Font"
                             Disabled="true" CustomButtonText="Only available in phase 3">
                </FieldActive>
            </MudItem>
        </MudGrid>
    </MudStack>

    <div class="d-flex mt-3">
        <MudButton StartIcon="@IconsFA.Solid.Icon("left-long").Font" Color="Color.Secondary" Variant="Variant.Filled" OnClick="GoProfile" Class="me-2">
            @Button.Back
        </MudButton>
    </div>
</RenderControl>

@code {
    private ValidationModel? Validation { get; set; }
    private ValidationValidation ValidationValidator { get; set; } = new();
    public RenderControlCore<ValidationModel?>? Core { get; set; } = new();

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();

        Validation = await ValidationApi.Get(null);

        if (Validation == null)
        {
            Validation = new ValidationModel();
        }

        Core?.LoadingFinished?.Invoke(Validation);
    }

    private void GoProfile()
    {
        Navigation.NavigateTo("profile");
    }

}