@page "/profile/filter"
@attribute [Authorize]
@using MM.Shared.Enums.Resources
@using MM.Shared.Models.Profile
@using MM.Shared.Models.Profile.Core
@using MM.WEB.Modules.Profile.Core
@using BiologicalSex = MM.Shared.Enums.BiologicalSex
@using Button = MM.WEB.Resources.Button
@using CareerCluster = MM.Shared.Enums.CareerCluster
@using Country = MM.Shared.Enums.Country
@using Diet = MM.Shared.Enums.Diet
@using Disability = MM.Shared.Enums.Disability
@using Drink = MM.Shared.Enums.Drink
@using HaveChildren = MM.Shared.Enums.HaveChildren
@using Height = MM.Shared.Enums.Height
@using Neurodiversity = MM.Shared.Enums.Neurodiversity
@using Smoke = MM.Shared.Enums.Smoke
@using TravelFrequency = MM.Shared.Enums.TravelFrequency
@using WantChildren = MM.Shared.Enums.WantChildren
@inherits PageCore<ProfileFilter>

@inject ProfileApi ProfileApi
@inject FilterApi FilterApi

<RenderControl TModel="FilterModel" Core="Core" Model="Filter" ExpressionEmpty="(FilterModel? obj) => obj == null" PrivateContent="true">
    <MudExpansionPanels Elevation="2">
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.BASIC)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Basic</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.BASIC)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Region)" TValue="Region" TEnum="Region" @bind-SelectedValue="@context.Region"
                                             CssIcon="@IconsFA.Solid.Icon("map-location-dot").Font" ShowHelper="false" Required="true" CustomInfo="@($"{GlobalTranslations.YourCurrentLocation} {Profile?.Location}")">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Nationality)" TValue="HashSet<Country>" TEnum="Country" @bind-SelectedValues="@context.Nationality"
                                             CssIcon="@IconsFA.Solid.Icon("earth-americas").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Languages)" TValue="HashSet<Language>" TEnum="Language" @bind-SelectedValues="@context.Languages"
                                             CssIcon="@IconsFA.Solid.Icon("language").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.MaritalStatus)" TValue="HashSet<MaritalStatus>" TEnum="MaritalStatus" @bind-SelectedValues="@context.MaritalStatus"
                                             CssIcon="@IconsFA.Solid.Icon("ring").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.BiologicalSex)" TValue="HashSet<BiologicalSex>" TEnum="BiologicalSex" @bind-SelectedValues="@context.BiologicalSex"
                                             CssIcon="@IconsFA.Solid.Icon("person-half-dress").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.GenderIdentities)" TValue="HashSet<GenderIdentity>" TEnum="GenderIdentity" @bind-SelectedValues="@context.GenderIdentities"
                                             CssIcon="@IconsFA.Solid.Icon("mars-and-venus").Font" ShowGroup="true" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.SexualOrientations)" TValue="HashSet<SexualOrientation>" TEnum="SexualOrientation" @bind-SelectedValues="@context.SexualOrientations"
                                             CssIcon="@IconsFA.Solid.Icon("heart-pulse").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.BIO)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Bio</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.BIO)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Ethnicity)" TValue="HashSet<Ethnicity>" TEnum="Ethnicity" @bind-SelectedValues="@context.Ethnicity"
                                             CssIcon="@IconsFA.Solid.Icon("globe").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.BodyType)" TValue="HashSet<BodyType>" TEnum="BodyType" @bind-SelectedValues="@context.BodyType"
                                             CssIcon="@IconsFA.Solid.Icon("weight-scale").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Neurodiversity)" TValue="HashSet<Neurodiversity>" TEnum="Neurodiversity" @bind-SelectedValues="@context.Neurodiversity"
                                             CssIcon="@IconsFA.Solid.Icon("brain").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <div class="d-flex" style="align-items: center;">
                                    <MudIcon Icon="@IconsFA.Solid.Icon("cake-candles").Font" Class="me-3"></MudIcon>
                                    <MudNumericField Label="@CustomAttributeHelper.GetCustomAttribute(() => Filter!.MinimalAge)?.Name" @bind-Value="@Filter!.MinimalAge"
                                                     Min="18" Class="me-3" AdornmentColor="Color.Primary"></MudNumericField>
                                    <MudNumericField Label="@CustomAttributeHelper.GetCustomAttribute(() => Filter!.MaxAge)?.Name" @bind-Value="@Filter!.MaxAge"
                                                     AdornmentColor="Color.Primary"></MudNumericField>
                                </div>
                                @*   <MudText Typo="Typo.caption" Style="margin-left: calc(1.5rem + 12px)">
                                    @CustomAttributeHelper.GetCustomAttribute(() => Filter!.MinimalAge)?.Description
                                </MudText> *@
                            </MudItem>
                            <MudItem xs="12">
                                <div class="d-flex" style="align-items: center;">
                                    <MudIcon Icon="@IconsFA.Solid.Icon("ruler").Font" Class="me-3"></MudIcon>
                                    <MudSelect Label="@CustomAttributeHelper.GetCustomAttribute(() => Filter!.MinimalHeight)?.Name" @bind-Value="@Filter!.MinimalHeight"
                                               AdornmentColor="Color.Primary" FullWidth="true" Class="me-3">
                                        @foreach (var item in Heights)
                                        {
                                            <MudSelectItem Value="@((Height?)item)">@item.GetName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                    <MudSelect Label="@CustomAttributeHelper.GetCustomAttribute(() => Filter!.MaxHeight)?.Name" @bind-Value="@Filter!.MaxHeight"
                                               AdornmentColor="Color.Primary" FullWidth="true" Class="me-3">
                                        @foreach (var item in Heights)
                                        {
                                            <MudSelectItem Value="@((Height?)item)">@item.GetName()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </div>
                                @*   <MudText Typo="Typo.caption" Style="margin-left: calc(1.5rem + 12px)">
                                    @CustomAttributeHelper.GetCustomAttribute(() => Filter!.MinimalAge)?.Description
                                </MudText> *@
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => Filter!.Disabilities)" TValue="HashSet<Disability>" TEnum="Disability" @bind-SelectedValues="@Filter!.Disabilities"
                                             CssIcon="@IconsFA.Solid.Icon("wheelchair").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.LIFESTYLE)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Lifestyle</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.LIFESTYLE)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Drink)" TValue="HashSet<Drink>" TEnum="Drink" @bind-SelectedValues="@context.Drink"
                                             CssIcon="@IconsFA.Solid.Icon("champagne-glasses").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Smoke)" TValue="HashSet<Smoke>" TEnum="Smoke" @bind-SelectedValues="@context.Smoke"
                                             CssIcon="@IconsFA.Solid.Icon("smoking").Font" ShowHelper="false" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Diet)" TValue="HashSet<Diet>" TEnum="Diet" @bind-SelectedValues="@context.Diet"
                                             CssIcon="@IconsFA.Solid.Icon("utensils").Font" Multiple="true" ShowDescription="false">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Religion)" TValue="HashSet<Religion>" TEnum="Religion" @bind-SelectedValues="@context.Religion"
                                             CssIcon="@IconsFA.Solid.Icon("hands-praying").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.FamilyInvolvement)" TValue="HashSet<FamilyInvolvement>" TEnum="FamilyInvolvement" @bind-SelectedValues="@context.FamilyInvolvement"
                                             CssIcon="@IconsFA.Solid.Icon("people-roof").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.NetWorth)" TValue="HashSet<NetWorth>" TEnum="NetWorth" @bind-SelectedValues="@context.NetWorth"
                                             CssIcon="@IconsFA.Solid.Icon("gem").Font" Multiple="true" Disabled="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.HaveChildren)" TValue="HashSet<HaveChildren>" TEnum="HaveChildren" @bind-SelectedValues="@context.HaveChildren"
                                             CssIcon="@IconsFA.Solid.Icon("child").Font" ShowHelper="false" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.HavePets)" TValue="HashSet<HavePets>" TEnum="HavePets" @bind-SelectedValues="@context.HavePets"
                                             CssIcon="@IconsFA.Solid.Icon("paw").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.EducationLevel)" TValue="HashSet<EducationLevel>" TEnum="EducationLevel" @bind-SelectedValues="@context.EducationLevel"
                                             CssIcon="@IconsFA.Solid.Icon("graduation-cap").Font" ShowHelper="false" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.CareerCluster)" TValue="HashSet<CareerCluster>" TEnum="CareerCluster" @bind-SelectedValues="@context.CareerCluster"
                                             CssIcon="@IconsFA.Solid.Icon("briefcase").Font" ShowGroup="true" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.LivingSituation)" TValue="HashSet<LivingSituation>" TEnum="LivingSituation" @bind-SelectedValues="@context.LivingSituation"
                                             CssIcon="@IconsFA.Solid.Icon("house-user").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.TravelFrequency)" TValue="HashSet<TravelFrequency>" TEnum="TravelFrequency" @bind-SelectedValues="@context.TravelFrequency"
                                             CssIcon="@IconsFA.Solid.Icon("plane").Font" ShowGroup="true" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.AnnualIncome)" TValue="HashSet<AnnualIncome>" TEnum="AnnualIncome" @bind-SelectedValues="@context.AnnualIncome"
                                             CssIcon="@IconsFA.Solid.Icon("money-bill").Font" Multiple="true" Disabled="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.PERSONALITY)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Personality</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.PERSONALITY)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.MoneyPersonality)" @bind-Value="@context.MoneyPersonality"
                                             CssIcon="@IconsFA.Solid.Icon("wallet").Font">
                                </FieldSwitch>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.SharedSpendingStyle)" @bind-Value="@context.SharedSpendingStyle"
                                             CssIcon="@IconsFA.Solid.Icon("hand-holding-dollar").Font">
                                </FieldSwitch>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.RelationshipPersonality)" @bind-Value="@context.RelationshipPersonality"
                                             CssIcon="@IconsFA.Solid.Icon("people-pulling").Font">
                                </FieldSwitch>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.MyersBriggsTypeIndicator)" @bind-Value="@context.MyersBriggsTypeIndicator"
                                             CssIcon="@IconsFA.Solid.Icon("user-tag").Font">
                                </FieldSwitch>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.LoveLanguage)" @bind-Value="@context.LoveLanguage"
                                             CssIcon="@IconsFA.Solid.Icon("hand-holding-heart").Font">
                                </FieldSwitch>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSwitch For="@(() => context.SexPersonality)" @bind-Value="@context.SexPersonality"
                                             CssIcon="@IconsFA.Solid.Icon("heart").Font">
                                </FieldSwitch>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.INTEREST)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Interest</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.INTEREST)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Food)" TValue="HashSet<Food>" TEnum="Food" @bind-SelectedValues="@context.Food"
                                             CssIcon="@IconsFA.Solid.Icon("pizza-slice").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Vacation)" TValue="HashSet<Vacation>" TEnum="Vacation" @bind-SelectedValues="@context.Vacation"
                                             CssIcon="@IconsFA.Solid.Icon("plane-departure").Font" Multiple="true" Order="o => o.Name">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Sports)" TValue="HashSet<Sports>" TEnum="Sports" @bind-SelectedValues="@context.Sports"
                                             CssIcon="@IconsFA.Solid.Icon("person-swimming").Font" Multiple="true" Order="o => o.Name">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.LeisureActivities)" TValue="HashSet<LeisureActivities>" TEnum="LeisureActivities" @bind-SelectedValues="@context.LeisureActivities"
                                             CssIcon="@IconsFA.Solid.Icon("umbrella-beach").Font" Multiple="true" Order="o => o.Name">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.MusicGenre)" TValue="HashSet<MusicGenre>" TEnum="MusicGenre" @bind-SelectedValues="@context.MusicGenre"
                                             CssIcon="@IconsFA.Solid.Icon("music").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.MovieGenre)" TValue="HashSet<MovieGenre>" TEnum="MovieGenre" @bind-SelectedValues="@context.MovieGenre"
                                             CssIcon="@IconsFA.Solid.Icon("film").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.TVGenre)" TValue="HashSet<TVGenre>" TEnum="TVGenre" @bind-SelectedValues="@context.TVGenre"
                                             CssIcon="@IconsFA.Solid.Icon("tv").Font" Multiple="true" Order="o => o.Name">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.ReadingGenre)" TValue="HashSet<ReadingGenre>" TEnum="ReadingGenre" @bind-SelectedValues="@context.ReadingGenre"
                                             CssIcon="@IconsFA.Solid.Icon("book-open-reader").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.RELATIONSHIP)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Relationship</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.RELATIONSHIP)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.SharedFinances)" TValue="HashSet<SharedFinances>" TEnum="SharedFinances" @bind-SelectedValues="@context.SharedFinances"
                                             CssIcon="@IconsFA.Solid.Icon("money-bill-transfer").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.ConflictResolutionStyle)" TValue="HashSet<ConflictResolutionStyle>" TEnum="ConflictResolutionStyle" @bind-SelectedValues="@context.ConflictResolutionStyle"
                                             CssIcon="@IconsFA.Solid.Icon("handshake").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.HouseholdManagement)" TValue="HashSet<HouseholdManagement>" TEnum="HouseholdManagement" @bind-SelectedValues="@context.HouseholdManagement"
                                             CssIcon="@IconsFA.Solid.Icon("broom").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.TimeTogetherPreference)" TValue="HashSet<TimeTogetherPreference>" TEnum="TimeTogetherPreference" @bind-SelectedValues="@context.TimeTogetherPreference"
                                             CssIcon="@IconsFA.Solid.Icon("hand-holding-hand").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.OppositeSexFriendships)" TValue="HashSet<OppositeSexFriendships>" TEnum="OppositeSexFriendships" @bind-SelectedValues="@context.OppositeSexFriendships"
                                             CssIcon="@IconsFA.Solid.Icon("people-arrows").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
        <MudExpansionPanel ExpandedChanged="(bool value) => VisibleChanged(value, Tabs.GOAL)" HeaderClass="mud-primary-text">
            <TitleContent>
                <div class="d-flex">
                    <MudText Color="Color.Primary" Typo="Typo.button">@Section.Goals</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                @if (Tab == Tabs.GOAL)
                {
                    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.RelationshipIntentions)" TValue="HashSet<RelationshipIntention>" TEnum="RelationshipIntention" @bind-SelectedValues="@context.RelationshipIntentions"
                                             CssIcon="@IconsFA.Solid.Icon("magnifying-glass").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.Relocation)" TValue="Relocation?" TEnum="Relocation" @bind-SelectedValue="@context.Relocation"
                                             CssIcon="@IconsFA.Solid.Icon("truck").Font">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                        <MudGrid>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.WantChildren)" TValue="HashSet<WantChildren>" TEnum="WantChildren" @bind-SelectedValues="@context.WantChildren"
                                             CssIcon="@IconsFA.Solid.Icon("baby").Font" ShowHelper="false" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <FieldSelect For="@(() => context.IdealPlaceToLive)" TValue="HashSet<IdealPlaceToLive>" TEnum="IdealPlaceToLive" @bind-SelectedValues="@context.IdealPlaceToLive"
                                             CssIcon="@IconsFA.Solid.Icon("house-circle-check").Font" Multiple="true">
                                </FieldSelect>
                            </MudItem>
                        </MudGrid>
                    </MudStack>
                }
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <div class="d-flex mt-3">
        <MudButton StartIcon="@IconsFA.Solid.Icon("floppy-disk").Font" Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveHandle" Class="me-2" Size="AppStateStatic.Size">
            @Button.Save
        </MudButton>
        <MudButton StartIcon="@IconsFA.Solid.Icon("wand-magic").Font" Color="Color.Secondary" Variant="Variant.Filled" OnClick="PopulateFields" Class="me-2" Size="AppStateStatic.Size">
            @Button.Fill
        </MudButton>
    </div>
</RenderControl>

<MudDialog @ref="@MudDialog" Style="width: 100%">
    <DialogContent>
        <MudList T="string" Dense="true">
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                @GlobalTranslations.PreferHelpTopic1
            </MudListItem>
            <MudListItem Icon="@IconsFA.Solid.Icon("check").Font" Style="text-align: justify;">
                @GlobalTranslations.PreferHelpTopic2
            </MudListItem>
        </MudList>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(async () => { await MudDialog!.CloseAsync(); })" Size="AppStateStatic.Size">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

<FloatingButton StartIcon="@IconsFA.Solid.Icon("circle-exclamation").Font" Color="Color.Info" Side="Side.Right" Position="2"
                OnClick="async() => await MudDialog!.ShowAsync(GlobalTranslations.HelpTitle, PopupHelper.Options(MaxWidth.ExtraSmall))">
</FloatingButton>
<FloatingButton Template="Template.Back"></FloatingButton>

@code {
    private ProfileModel? Profile { get; set; }
    private FilterModel? Filter { get; set; }
    public RenderControlCore<FilterModel?>? Core { get; set; } = new();
    private MudDialog? MudDialog { get; set; }

    private Tabs? Tab { get; set; }

    private enum Tabs
    {
        BASIC,
        BIO,
        LIFESTYLE,
        PERSONALITY,
        INTEREST,
        RELATIONSHIP,
        GOAL
    }

    public List<MM.Shared.Enums.Height> Heights { get; set; } = [];

    protected override void OnInitialized()
    {
        Heights = EnumHelper.GetArray<MM.Shared.Enums.Height>().ToList();
    }

    private void VisibleChanged(bool value, Tabs? tab)
    {
        if (value)
            Tab = tab;
        else if (Tab == tab)
            Tab = null;
    }

    protected override async Task LoadNonEssentialDataAsync()
    {
        Core?.LoadingStarted?.Invoke();

        Profile = await ProfileApi.Get(null);
        Filter = await FilterApi.Get(null);

        if (Profile == null)
        {
            Core?.ShowError(GlobalTranslations.ProfileNotFound);
        }

        if (Filter == null)
        {
            Filter = new FilterModel();

            var confirmed = await DialogService.ShowMessageBox("Modern Matchmaker", GlobalTranslations.ITrustPlataform, Button.Ok, Button.Cancel) ?? false;

            if (!confirmed)
            {
                Navigation.NavigateTo("profile");
                return;
            }

            await PopulateFields();
        }

        Core?.LoadingFinished?.Invoke(Filter);
    }

    private async Task SaveHandle()
    {
        if (Filter == null) throw new InvalidOperationException("profile is null");

        try
        {
            var validator = new FilterValidation();

            var result = await validator.ValidateAsync(Filter);

            if (result.IsValid)
            {
                Filter = await FilterApi.Update(Core, Filter);

                Navigation.NavigateTo("profile");
            }
            else
            {
                await ShowWarning(result.Errors[0].ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

    private async Task PopulateFields()
    {
        try
        {
            SmartLookingCore.PopulateFields(Profile, Filter);

            await ShowInfo(@<div>
                <span style="font-weight: bold;" class="me-2">@GlobalTranslations.PopulateFilterTitle</span>@GlobalTranslations.PopulateFilterDescription
            </div>);
        }
        catch (Exception ex)
        {
            await ProcessException(ex);
        }
    }

}