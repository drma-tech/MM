@page "/profile/setting"
@using MM.Shared.Models.Profile
@using MM.WEB.Modules.Profile.Core

@attribute [Authorize]
@inherits PageCore<ProfileSetting>
@inject SettingApi SettingApi

<RenderControl Core="Core" Model="Setting" ExpressionEmpty="((SettingModel? obj) => obj == null)" PrivateContent="true">
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            <FieldSwitch For="@(() => Setting!.BlindDate)" @bind-Value="@Setting!.BlindDate" CssIcon="@Blazorise.Icons.FontAwesome.FontAwesomeIcons.EyeSlash"></FieldSwitch>
        </Column>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
        </Column>
    </Row>

    <Button Color="Color.Primary" Margin="Margin.Is2.OnY" Clicked="SaveHandle">
        <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon> @WEB.Resources.Button.Save
    </Button>
</RenderControl>

@code {
    private SettingModel? Setting { get; set; }
    public RenderControlCore<SettingModel?>? Core { get; set; } = new();

    protected override async Task LoadDataRender()
    {
        Core?.LoadingStarted?.Invoke();

        Setting = await SettingApi.Get(null);

        if (Setting == null)
        {
            Setting = new();
        }

        Core?.LoadingFinished?.Invoke(Setting);
    }

    private async Task SaveHandle()
    {
        if (Setting == null) throw new InvalidOperationException("Setting is null");

        try
        {
            Setting = await SettingApi.Update(Core, Setting);

            Navigation.NavigateTo("profile");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}
