@page "/profile/setting"

@attribute [Authorize]
@using MM.Shared.Models.Profile
@using MM.WEB.Api
@using MM.WEB.Modules.Profile.Core
@using Button = MM.WEB.Resources.Button
@inherits PageCore<ProfileSetting>

@inject SettingApi SettingApi
@inject ProfileApi ProfileApi
@inject StorageApi StorageApi

<RenderControl Core="Core" Model="Setting" ExpressionEmpty="(SettingModel? obj) => obj == null" PrivateContent="true">
    <MudStack Row="true" Spacing="4" Breakpoint="Breakpoint.Xs">
        <MudGrid>
            <MudItem xs="12">
                <FieldSwitch For="@(() => Setting!.BlindDate)" @bind-Value="@Setting!.BlindDate" CssIcon="@IconsFA.Solid.Icon("eye").Font"></FieldSwitch>
            </MudItem>
        </MudGrid>
        <MudGrid>
            <MudItem xs="12">

            </MudItem>
        </MudGrid>
    </MudStack>

    <div class="d-flex mt-3">
        <MudButton StartIcon="@IconsFA.Solid.Icon("floppy-disk").Font" Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveHandle" Class="me-2"
                   Disabled="@(Setting == null || Principal == null || Principal.PublicProfile)" Size="AppStateStatic.Size">
            @Button.Save
        </MudButton>
    </div>
</RenderControl>

<FloatingButton Template="Template.Back"></FloatingButton>

@code {
    private AuthPrincipal? Principal { get; set; }
    private SettingModel? Setting { get; set; }
    public RenderControlCore<SettingModel?>? Core { get; set; } = new();

    protected override async Task LoadNonEssentialDataAsync()
    {
        Core?.LoadingStarted?.Invoke();

        Principal = await PrincipalApi.Get(IsAuthenticated);
        Setting = await SettingApi.Get(null);

        if (Setting == null)
        {
            Setting = new SettingModel();
        }

        Core?.LoadingFinished?.Invoke(Setting);
    }

    private async Task SaveHandle()
    {
        if (Setting == null) throw new InvalidOperationException("Setting is null");

        try
        {
            Core?.ProcessingStarted?.Invoke();

            Setting = await SettingApi.Update(null, Setting);

            if (Setting!.BlindDate)
            {
                var profile = await ProfileApi.Get(null);

                if (profile != null && profile.Gallery != null)
                {
                    if (profile.Gallery.FaceId != null) profile = await StorageApi.DeletePhotoGallery(ImageHelper.PhotoType.Face);
                    if (profile!.Gallery!.BodyId != null) profile = await StorageApi.DeletePhotoGallery(ImageHelper.PhotoType.Body);

                    if (profile!.Gallery!.Type != GalleryType.BlindDate)
                    {
                        profile.Gallery.Type = GalleryType.BlindDate;
                        await ProfileApi.Update(null, profile);
                    }
                }
            }
            else
            {
                var profile = await ProfileApi.Get(null);

                if (profile?.Gallery?.Type == GalleryType.BlindDate)
                {
                    profile.Gallery.Type = GalleryType.NoPictures;
                    await ProfileApi.Update(null, profile);
                }
            }

            Core?.ProcessingFinished?.Invoke(Setting);

            Navigation.NavigateTo("profile");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Snackbar, Logger);
        }
    }

}