@using MM.Shared.Models.Support;
@using MM.WEB.Modules.Support.Core;
@inherits ComponentCore<AnnouncementComponent>

@inject IJSRuntime JsRuntime
@inject UpdateApi UpdateApi

<RenderControl Core="Core" Model="Updates" ExpressionEmpty="@((HashSet<UpdateModel> lst) => lst.Empty())">
    @foreach (var item in Updates?.OrderByDescending(o => o.Date) ?? Enumerable.Empty<UpdateModel>())
    {
        <Alert Color="Color.Info" Visible="true" Margin="Margin.Is2.FromBottom">
            <AlertMessage>
                @item.Title
                @if (item.IsNew)
                {
                    <Badge Color="Color.Danger" Float="Float.End">
                        @WEB.Resources.Button.New
                    </Badge>
                }
            </AlertMessage>
        </Alert>
        <Paragraph Margin="Margin.Is2.OnY" TextAlignment="TextAlignment.Justified">
            @((MarkupString)(item.Description ?? ""))
        </Paragraph>
    }
</RenderControl>

@code {
    [Parameter] public HashSet<UpdateModel> Updates { get; set; } = [];
    [Parameter] public RenderControlCore<HashSet<UpdateModel>> Core { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000).ContinueWith(async (task) =>
        {
            await JsRuntime.InvokeAsync<string>("SetLocalStorage", "updates-date", DateTime.Now.Ticks);
            foreach (var item in Updates)
            {
                item.IsNew = false;
                UpdateApi.DataChanged?.Invoke(item);
            }
            StateHasChanged();
        });
    }
}
