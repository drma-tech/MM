@using MM.Shared.Models.Support;
@using MM.WEB.Modules.Shared.General;
@using MM.WEB.Modules.Support.Core;
@inherits ComponenteCore<FeedbackComponent>
@inject TicketApi TicketApi
@inject TicketVoteApi TicketVoteApi
@inject IModalService ModalService

<Fields>
    <Field ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
        <FieldBody>
            <Addons>
                <Addon AddonType="AddonType.Start" VerticalAlignment="VerticalAlignment.Middle">
                    <Button Color="Color.Primary" Disabled="true" Size="Size.Small">
                        <Blazorise.Icon Name="@FontAwesomeIcons.Filter"></Blazorise.Icon>
                    </Button>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <Select TValue="TicketType" @bind-SelectedValue="@TicketTypeSel" Size="Size.Small">
                        @foreach (var item in EnumHelper.GetArray<TicketType>())
                        {
                            <SelectItem Value="@item">@item.GetName()</SelectItem>
                        }
                    </Select>
                </Addon>
            </Addons>
        </FieldBody>
    </Field>
    <Field ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
        <FieldBody>
            <Addons>
                <Addon AddonType="AddonType.Start" Size="Size.Small">
                    <Button Color="Color.Primary" Disabled="true" Size="Size.Small">
                        <Blazorise.Icon Name="@FontAwesomeIcons.Filter"></Blazorise.Icon>
                    </Button>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <Select TValue="TicketStatus?" @bind-SelectedValue="@TicketStatusSel" Size="Size.Small">
                        <SelectItem></SelectItem>
                        @foreach (var item in EnumHelper.GetArray<TicketStatus>())
                        {
                            <SelectItem Value="@item">@item.GetName()</SelectItem>
                        }
                    </Select>
                </Addon>
            </Addons>
        </FieldBody>
    </Field>
    <Field ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
        <FieldBody>
            <Addons>
                <Addon AddonType="AddonType.Start">
                    <Button Color="Color.Primary" Disabled="true" Size="Size.Small">
                        <Blazorise.Icon Name="@FontAwesomeIcons.SortAmountDown"></Blazorise.Icon>
                    </Button>
                </Addon>
                <Addon AddonType="AddonType.Body">
                    <Select TValue="Order" @bind-SelectedValue="@OrderSel" Size="Size.Small">
                        @foreach (var item in EnumHelper.GetArray<Order>())
                        {
                            <SelectItem Value="@item">@item.GetName()</SelectItem>
                        }
                    </Select>
                </Addon>
            </Addons>
        </FieldBody>
    </Field>
    <Field ColumnSize="ColumnSize.Is6.Is3.OnTablet.Is2.OnFullHD">
        <FieldBody>
            <Button Color="Color.Primary" Block="true" Clicked="ShowModal" Disabled="!IsUserAuthenticated" Size="Size.Small">
                <Blazorise.Icon Name="@FontAwesomeIcons.Plus"></Blazorise.Icon> @WEB.Resources.Buttons.New
            </Button>
        </FieldBody>
    </Field>
</Fields>
<Loading @ref="LoadingTicket" IsEmptyFilter="(!GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel).Any())">
    @foreach (var item in GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel))
    {
        <Row HorizontalGutter="8" VerticalGutter="8">
            <Column Margin="Margin.Is1.FromBottom" ColumnSize="ColumnSize.Is2" Overflow="Overflow.Auto">
                <Div Style="height: 100px;" TextAlignment="TextAlignment.Center" TextWeight="TextWeight.Bold">
                    <Button Size=" Size.ExtraSmall" Margin="Margin.Is0" Color="Color.Primary" Block="true" Outline="true" Clicked="()=>Vote(item.Key, VoteType.PlusOne)" Disabled="anyVote(item.Key, IdUser) || !IsUserAuthenticated">
                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleUp"></Blazorise.Icon>
                    </Button>
                    @item.TotalVotes
                    <Button Size="Size.ExtraSmall" Margin="Margin.Is0" Color="Color.Primary" Block="true" Outline="true" Clicked="()=>Vote(item.Key, VoteType.MinusOne)" Disabled="anyVote(item.Key, IdUser) || !IsUserAuthenticated">
                        <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.AngleDown"></Blazorise.Icon>
                    </Button>
                </Div>
            </Column>
            <Column Margin="Margin.Is1.FromBottom" ColumnSize="ColumnSize.Is10">
                <Paragraph Margin="Margin.Is2.FromBottom" TextAlignment="TextAlignment.Justified" Overflow="Overflow.Auto">
                    <Heading Size="HeadingSize.Is5">@item.Title.GetResume(150)</Heading>
                </Paragraph>
                <Paragraph Margin="Margin.Is2.FromBottom" TextAlignment="TextAlignment.Justified" Overflow="Overflow.Auto">
                    @item.Description.GetResume(150)
                </Paragraph>
                <Paragraph Margin="Margin.Is2.FromBottom">
                    <Badge Color="Color.Dark" Margin="Margin.Is1.FromEnd"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Clock"></Blazorise.Icon> @item?.DtInsert.GetElapsedTime()</Badge>
                    <Badge Color="Color.Dark" Margin="Margin.Is2.FromEnd">@item.TicketType.GetName()</Badge>
                    @if (item.TicketStatus == TicketStatus.New)
                    {
                        <Badge Color="Color.Info"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                    }
                    else if (item.TicketStatus == TicketStatus.UnderConsideration)
                    {
                        <Badge Color="Color.Secondary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                    }
                    else if (item.TicketStatus == TicketStatus.Planned)
                    {
                        <Badge Color="Color.Primary"><Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.InfoCircle"></Blazorise.Icon> @item.TicketStatus.GetName()</Badge>
                    }
                    else if (item.TicketStatus == TicketStatus.Progress)
                    {
                        <Badge Color="Color.Warning">@item.TicketStatus.GetName()</Badge>
                    }
                    else if (item.TicketStatus == TicketStatus.Done)
                    {
                        <Badge Color="Color.Success">@item.TicketStatus.GetName()</Badge>
                    }
                    else //Declined
                    {
                        <Badge Color="Color.Danger">@item.TicketStatus.GetName()</Badge>
                    }
                </Paragraph>
            </Column>
        </Row>
        @if (item != GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel).Last())
        {
            <Divider Margin="Margin.Is0.FromTop.Is2.FromBottom" />
        }
    }
</Loading>

@code {
    private HashSet<TicketModel> tickets = new();
    private HashSet<TicketVoteModel> myVotes = new();

    public Loading? LoadingTicket { get; set; }

    private TicketType TicketTypeSel { get; set; } = TicketType.Improvement;
    private TicketStatus? TicketStatusSel { get; set; }
    private Order OrderSel { get; set; } = Order.Last;

    public bool IsUserAuthenticated { get; set; }
    public string? IdUser { get; set; }

    private enum Order
    {
        [Custom(Name = "OrderLast", ResourceType = typeof(MM.WEB.Modules.Support.Resources.Translations))]
        Last,

        [Custom(Name = "OrderVoted", ResourceType = typeof(MM.WEB.Modules.Support.Resources.Translations))]
        Voted
    }

    protected override async Task LoadData()
    {
        LoadingTicket?.Start();

        IsUserAuthenticated = await AppState.IsUserAuthenticated();
        IdUser = await AppState.GetIdUser();
        tickets = await TicketApi.GetList();
        if (IsUserAuthenticated) myVotes = await TicketVoteApi.GetMyVotes();

        StateHasChanged();
        LoadingTicket?.Finish(!GetTicketList(TicketTypeSel, TicketStatusSel, OrderSel).Any());
    }

    private List<TicketModel> GetTicketList(TicketType ticketType, TicketStatus? ticketStatus, Order order)
    {
        IEnumerable<TicketModel> result;

        if (ticketStatus.HasValue)
            result = tickets.Where(w => w.TicketType == ticketType & w.TicketStatus == ticketStatus);
        else
            result = tickets.Where(w => w.TicketType == ticketType);

        if (order == Order.Last)
            return result.OrderByDescending(o => o.DtInsert).ToList();
        else
            return result.OrderByDescending(o => o.TotalVotes).ToList();
    }

    public Task ShowModal()
    {
        return ModalService.Show<NewTicket>("",
                x =>
                {
                    x.Add(x => x.Inserted, new EventCallbackFactory().Create<TicketModel>(this, (TicketModel model) => tickets.Add(model)));
                },
                new ModalInstanceOptions()
                    {
                        UseModalStructure = false,
                        Centered = true,
                        Size = ModalSize.Default,
                    });
    }

    private async Task Vote(string? IdTicket, VoteType voteType)
    {
        if (string.IsNullOrEmpty(IdTicket)) throw new ArgumentNullException(nameof(IdTicket));

        try
        {
            if (anyVote(IdTicket, IdUser))
            {
                await Toast.Error("Você já votou neste ticket");
            }
            else
            {
                var vote = new TicketVoteModel();
                vote.Initialize("", IdTicket);

                vote.VoteType = voteType;
                vote.IdVotedUser = await AppState.GetIdUser();

                await TicketVoteApi.Vote(vote);
                tickets.Single(s => s.Key == IdTicket.ToString()).Vote(voteType);

                myVotes.Add(vote);

                await Toast.Success("Voto registrado com sucesso");
            }
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }

    private bool anyVote(string? IdTicket, string? IdUser) => myVotes.Any(a => a.Key == IdTicket & a.IdVotedUser == IdUser);
}