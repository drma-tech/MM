@using MM.Shared.Models.Support
@using MM.WEB.Modules.Support.Core
@inherits ComponentCore<NewTicket>
@inject TicketApi TicketApi

<ModalHeader>
    <ModalTitle Size="HeadingSize.Is5">@Resources.Translations.NewTicketTitle</ModalTitle>
    <CloseButton />
</ModalHeader>
<ModalBody>
    <EditForm Model="@Ticket" OnValidSubmit="SubmitForm">
        <div class="form-group">
            <Select TValue="TicketType" @bind-SelectedValue="@TicketType" Size="Size.Small">
                @foreach (var item in EnumHelper.GetArray<TicketType>())
                {
                    <SelectItem Value="@item">@item.GetName()</SelectItem>
                }
            </Select>
            <ValidationMessage For="@(()=>Ticket!.TicketType)"></ValidationMessage>
        </div>
        <div class="form-group">
            <TextEdit @bind-Text="@Ticket!.Title" MaxLength="100" Placeholder="@CustomAttributeHelper.GetCustomAttribute(()=>Ticket!.Title)?.Placeholder" Size="Size.Small"></TextEdit>
            <ValidationMessage For="@(()=>Ticket.Title)"></ValidationMessage>
        </div>
        <div class="form-group">
            <MemoEdit @bind-Text="@Ticket.Description" Rows="7" MaxLength="512" Placeholder="@CustomAttributeHelper.GetCustomAttribute(()=>Ticket.Description)?.Placeholder" Size="Size.Small"></MemoEdit>
            <ValidationMessage For="@(()=>Ticket.Description)"></ValidationMessage>
        </div>
        <Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="!IsAuthenticated" Size="Size.Small">
            @WEB.Resources.Button.Save
        </Button>
        <Button Clicked="@ModalService.Hide" Color="Color.Secondary" Size="Size.Small">
            @WEB.Resources.Button.Cancel
        </Button>
        <Button Clicked="@ImportLastError" Color="Color.Danger" Float="Float.End" Disabled="(TicketType == TicketType.Improvement)" Size="Size.Small">
            @Resources.Translations.ImportLastError
        </Button>
    </EditForm>
</ModalBody>

@code {
    [Parameter][EditorRequired] public TicketType TicketType { get; set; } = TicketType.BugReport;
    [Parameter][EditorRequired] public bool IsAuthenticated { get; set; }
    [Parameter][EditorRequired] public string? UserId { get; set; }

    public TicketModel? Ticket { get; set; } = new();
    [Parameter] public EventCallback<TicketModel> Inserted { get; set; }

    private void ImportLastError()
    {
        if (TicketType == TicketType.BugReport && AppStateStatic.Logs.Any())
        {
            var list = AppStateStatic.Logs;
            var log = list.LastOrDefault();

            if (log != null)
            {
                Ticket ??= new();

                Ticket.Title = log.Message ?? "erro desconhecido";
                Ticket.Description = System.Text.Json.JsonSerializer.Serialize(log);

                AppStateStatic.Logs.Remove(log);
            }
            else
            {
                Toast.Warning("No errors found");
            }
        }
        else
        {
            Toast.Warning("No errors found");
        }
    }

    public async Task SubmitForm()
    {
        try
        {
            Ticket ??= new();

            Ticket.TicketType = TicketType;
            Ticket.TicketStatus = TicketStatus.New;
            Ticket.Initialize(UserId);

            Ticket = await TicketApi.Insert(Ticket);

            await Toast.Success("Salvo com sucesso");

            await Inserted.InvokeAsync(Ticket);

            Ticket = new();
            await ModalService.Hide();
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}