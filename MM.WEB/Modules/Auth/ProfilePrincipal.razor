@page "/ProfilePrincipal"
@inherits PageCore<ProfilePrincipal>
@attribute [Authorize]

@using System.Security.Claims
@using MM.Shared.Models.Auth
@using MM.WEB.Modules.Auth.Core
@using MM.WEB.Modules.Auth.Resources

<EditForm Model="@principal" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
    <Row HorizontalGutter="8" VerticalGutter="8">
        <Column ColumnSize="ColumnSize.Is6.OnWidescreen">
            <Card Margin="Margin.Is3.FromBottom">
                <CardHeader>@Translations.RegistrationInformation</CardHeader>
                <CardBody>
                    <Fields>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>@Translations.AccessProvider</FieldLabel>
                            <TextEdit Text="@principal?.IdentityProvider" Disabled="true" />
                        </Field>
                        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                            <FieldLabel>@Translations.Identification</FieldLabel>
                            <TextEdit Text="@principal?.UserDetails" Disabled="true" />
                        </Field>
                    </Fields>
                    @if (principal != null)
                    {
                        <Fields>
                            <Field ColumnSize="ColumnSize.Is6.OnDesktop">
                                <FieldLabel>@Translations.Email</FieldLabel>
                                <TextEdit @bind-Text="@principal.Email" Role="TextRole.Email" />
                                <ValidationMessage For="@(() => principal.Email)"></ValidationMessage>
                            </Field>
                            @*<Field ColumnSize="ColumnSize.Is6.OnDesktop">
                                <FieldLabel>Mobile</FieldLabel>
                                <TextEdit @bind-Text="@principal.Mobile" Disabled="true" />
                                <ValidationMessage For="@(() => principal.Mobile)"></ValidationMessage>
                            </Field>*@
                        </Fields>
                    }
                </CardBody>
            </Card>
        </Column>
    </Row>
    <Row Margin="Margin.Is3.FromBottom">
        <Column>
            @if (AppStateStatic.Language == Language.pt)
            {
                <Check TValue="bool" @bind-Checked="@termsAccepted">Aceito os <Blazorise.Link To="Terms/pt" Target="Target.Blank">Termos de Uso</Blazorise.Link></Check>
            }
            else
            {
                <Check TValue="bool" @bind-Checked="@termsAccepted">I accept the <Blazorise.Link To="Terms/pt" Target="Target.Blank">Terms of Use</Blazorise.Link></Check>
            }
        </Column>
    </Row>
    <Row>
        <Column>
            <Button Type="ButtonType.Submit" Color="Color.Primary" Disabled="@(!termsAccepted)">
                <Blazorise.Icon Name="FontAwesomeIcons.Save"></Blazorise.Icon> @WEB.Resources.Buttons.Save
            </Button>
        </Column>
    </Row>
</EditForm>

@code {
    private ClientePrincipal? principal { get; set; } = new();
    private bool termsAccepted;

    protected override async Task LoadData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (authState != null && await AppState.IsUserAuthenticated(authState))
        {
            principal = await PrincipalApi.Get();

            if (principal == null)
            {
                principal = new();

                principal.UserId = authState.User.Claims.FirstOrDefault(w => w.Type == ClaimTypes.NameIdentifier)?.Value;
                principal.IdentityProvider = authState.User.Identity?.AuthenticationType;
                principal.UserDetails = authState.User.Identity?.Name;
                principal.UserRoles = authState.User.Claims.Where(w => w.Type == ClaimTypes.Role)?.Select(s => s.Value).ToArray() ?? Array.Empty<string>();

                principal.Email = principal.UserDetails;
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            principal = await PrincipalApi.Add(principal);

            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ex.ProcessException(Toast, Logger);
        }
    }
}