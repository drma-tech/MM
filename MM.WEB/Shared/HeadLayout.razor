@inherits ComponenteNoDataCore<HeadLayout>
@inject NavigationManager Navigation

<Bar Mode="BarMode.Horizontal" Background="Background.Secondary" ThemeContrast="ThemeContrast.Dark" Padding="Padding.Is2">
    <Container Fluid="true" Padding="Padding.Is0.OnX">
        <MediaQuery Media="@Breakpoints.LargeUp">
            <Matched>
                <BarToggler Bar="@AppStateStatic.Sidebar" Background="Background.Dark" Margin="Margin.Is2.FromEnd" Padding="Padding.Is0" Style="height: 31px; width: 31px;" />
            </Matched>
        </MediaQuery>
        <BarBrand Padding="Padding.Is0.OnY">
            <form class="d-flex">
                <MediaQuery Media="@Breakpoints.XSmallDown">
                    <Matched>
                       @* <Select TValue="Region" SelectedValue="@AppStateStatic.Region" SelectedValueChanged="RegionValueChanged" Size="Size.Small" Style="width:auto;" Margin="Margin.Is2.FromEnd">
                            @foreach (var item in Regions.OrderBy(o => o.Name))
                            {
                                <SelectItem Value="@item.ValueObject">@(((Region)item.ValueObject).GetCustomAttribute(false)?.Name)</SelectItem>
                            }
                        </Select>*@
                        <Select TValue="Language" SelectedValue="@AppStateStatic.Language" SelectedValueChanged="LanguageValueChanged" Size="Size.Small" Style="width:auto;">
                            @foreach (var item in Languages.OrderBy(o => o.Name))
                            {
                                <SelectItem Value="@item.Value">@(((Language)item.Value).GetCustomAttribute(false)?.Name)</SelectItem>
                            }
                        </Select>
                    </Matched>
                    <Unmatched>
                        @*<Select TValue="Region" SelectedValue="@AppStateStatic.Region" SelectedValueChanged="RegionValueChanged" Size="Size.Small" Style="width:auto;" Margin="Margin.Is2.FromEnd">
                            @foreach (var item in Regions.OrderBy(o => o.Name))
                            {
                                <SelectItem Value="@item.ValueObject">@item.Name</SelectItem>
                            }
                        </Select>*@
                        <Select TValue="Language" SelectedValue="@AppStateStatic.Language" SelectedValueChanged="LanguageValueChanged" Size="Size.Small" Style="width:auto;">
                            @foreach (var item in Languages.OrderBy(o => o.Name))
                            {
                                <SelectItem Value="@item.Value">@item.Name</SelectItem>
                            }
                        </Select>
                    </Unmatched>
                </MediaQuery>
            </form>
        </BarBrand>
        <BarMenu Style="flex-basis: unset !important;">
            <AuthorizeView>
                <Authorized>
                    <Button Color="Color.Danger" Clicked="Logout" title="Logout" Float="Float.End" Size="Size.Small">
                        <Blazorise.Icon Name="FontAwesomeIcons.SignOutAlt" /> @WEB.Resources.Buttons.Logout
                    </Button>
                </Authorized>
                <NotAuthorized>
                    <Button Color="Color.Primary" Type="ButtonType.Link" To="/login-providers" title="Login" Float="Float.End" Size="Size.Small">
                        <Blazorise.Icon Name="FontAwesomeIcons.SignInAlt" /> @WEB.Resources.Buttons.Login
                    </Button>
                </NotAuthorized>
            </AuthorizeView>
        </BarMenu>
    </Container>
</Bar>

@code {
    private IReadOnlyList<EnumObject> Regions { get; set; } = Array.Empty<EnumObject>();
    private IReadOnlyList<EnumObject> Languages { get; set; } = Array.Empty<EnumObject>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //Regions = EnumHelper.GetObjArray<Region>();
        Languages = EnumHelper.GetObjArray<Language>().Where(w => !string.IsNullOrEmpty(w.Name)).ToArray();

        //var region = Navigation?.QueryString("region");

        //if (!string.IsNullOrEmpty(region))
        //{
        //    AppStateStatic.ChangeRegion((Region)Enum.Parse(typeof(Region), region));
        //}
    }

    private void Logout()
    {
        Navigation.NavigateTo("/.auth/logout", forceLoad: true);
    }

    //protected void RegionValueChanged(Region value)
    //{
    //    AppStateStatic.ChangeRegion(value);

    //    Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("region", value.GetName(false)));
    //}

    protected void LanguageValueChanged(Language value)
    {
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("language", value.ToString()), forceLoad: true);
    }
}