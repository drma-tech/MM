@using Button = MM.WEB.Resources.Button
@inherits ComponentCore<SettingsPopup>

@inject IJSRuntime JsRuntime

<MudDialog Style="width: 100%">
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <FieldSelect TValue="Language" TEnum="Language" For="@(() => AppStateStatic.Language)" ShowDataSelectDescription="false"
                             SelectedValue="@AppStateStatic.Language" SelectedValueChanged="LanguageValueChanged"
                             CssIcon="@Icons.Material.Filled.Language" Order="@(o => o.Name)" Filter="@(o => o.Group?.Contains("site") ?? false)" ShowHelper="false">
                </FieldSelect>
            </MudItem>
            <MudItem xs="12">
                <MudToggleIconButton Toggled="@AppStateStatic.DarkMode" ToggledChanged="DarkModeChanged"
                                     Icon="@Icons.Material.Filled.DarkMode" ToggledIcon="@Icons.Material.Filled.LightMode" />
                <span>@(AppStateStatic.DarkMode ? "Light" : "Dark") Mode</span>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => { MudDialog?.Close(); })">@Button.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    protected override async Task LoadDataRender()
    {
        var language = await JsRuntime.InvokeAsync<string>("GetLocalStorage", "language");

        if (language.NotEmpty())
        {
            var languages = EnumHelper.GetObjArray<Language>(false);
            var lang = languages.FirstOrDefault(w => w.Description == language);

            AppStateStatic.ChangeLanguage(lang?.Value ?? Language.English);
        }
    }

    protected async Task LanguageValueChanged(Language value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "language", value.GetDescription(false));
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameter("language", value.GetCustomAttribute(false)?.Description), true);
    }

    protected async Task DarkModeChanged(bool value)
    {
        await JsRuntime.InvokeAsync<string>("SetLocalStorage", "dark-mode", value.ToString());

        AppStateStatic.ChangeDarkMode(value);
    }

}
