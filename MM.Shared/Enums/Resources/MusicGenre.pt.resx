<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClassicalOpera" xml:space="preserve">
    <value>Clássico e Ópera</value>
  </data>
  <data name="ClassicalOpera_Description" xml:space="preserve">
    <value>Composições estruturadas e música orquestral de vários períodos históricos (por exemplo, barroco, sinfônico, ópera)</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Country_Description" xml:space="preserve">
    <value>Gênero baseado em narrativas com raízes nas tradições folclóricas americanas (por exemplo, country clássico, country contemporâneo)</value>
  </data>
  <data name="ElectronicDance" xml:space="preserve">
    <value>Eletrônica e Dance</value>
  </data>
  <data name="ElectronicDance_Description" xml:space="preserve">
    <value>Sons sintetizados e faixas com batidas pesadas para cenas de clubes e festivais (por exemplo, house, techno, trance)</value>
  </data>
  <data name="ExperimentalAvantGarde" xml:space="preserve">
    <value>Experimental e de vanguarda</value>
  </data>
  <data name="ExperimentalAvantGarde_Description" xml:space="preserve">
    <value>Música não tradicional que ultrapassa os limites da estrutura e do som (por exemplo, ruído, ambiente, minimalista)</value>
  </data>
  <data name="FolkAcoustic" xml:space="preserve">
    <value>Folk e Acústico</value>
  </data>
  <data name="FolkAcoustic_Description" xml:space="preserve">
    <value>Música enraizada em sons tradicionais, geralmente com instrumentos acústicos (por exemplo, folk, americana, cantor e compositor)</value>
  </data>
  <data name="GospelReligious" xml:space="preserve">
    <value>Evangelho e Religioso</value>
  </data>
  <data name="GospelReligious_Description" xml:space="preserve">
    <value>Música com temas religiosos ou espirituais, geralmente voltada para a comunidade (por exemplo, gospel, hinos, música devocional)</value>
  </data>
  <data name="HipHopRap" xml:space="preserve">
    <value>Hip-Hop e Rap</value>
  </data>
  <data name="HipHopRap_Description" xml:space="preserve">
    <value>Música com ritmo, fluidez lírica, narrativa e comentários sociais (por exemplo, rap, trap, hip-hop old-school)</value>
  </data>
  <data name="JazzBlues" xml:space="preserve">
    <value>Jazz e Blues</value>
  </data>
  <data name="JazzBlues_Description" xml:space="preserve">
    <value>Gêneros ricos e improvisados com raízes na história afro-americana (por exemplo, jazz, blues, bebop)</value>
  </data>
  <data name="MetalHardRock" xml:space="preserve">
    <value>Metal e Hard Rock</value>
  </data>
  <data name="MetalHardRock_Description" xml:space="preserve">
    <value>Sons intensos e amplificados, geralmente com tons agressivos (por exemplo, heavy metal, thrash, hard rock)</value>
  </data>
  <data name="PopMainstream" xml:space="preserve">
    <value>Pop e mainstream</value>
  </data>
  <data name="PopMainstream_Description" xml:space="preserve">
    <value>Música acessível e amplamente popular em todas as paradas e culturas (por exemplo, pop, dance-pop, synth-pop)</value>
  </data>
  <data name="RBSoul" xml:space="preserve">
    <value>RB e Alma</value>
  </data>
  <data name="RBSoul_Description" xml:space="preserve">
    <value>Música emocional e focada no ritmo, enraizada nas tradições afro-americanas (por exemplo, RB, soul, funk)</value>
  </data>
  <data name="ReggaeWorldMusic" xml:space="preserve">
    <value>Reggae e música do mundo</value>
  </data>
  <data name="ReggaeWorldMusic_Description" xml:space="preserve">
    <value>Música de diversas origens culturais, muitas vezes com ritmos distintos (por exemplo, reggae, afrobeat, latino)</value>
  </data>
  <data name="RockAlternative" xml:space="preserve">
    <value>Rock &amp; Alternativo</value>
  </data>
  <data name="RockAlternative_Description" xml:space="preserve">
    <value>Sons e subgêneros movidos a guitarra com um toque rebelde (por exemplo, rock clássico, punk, indie, grunge)</value>
  </data>
  <data name="SoundtracksScores" xml:space="preserve">
    <value>Trilhas sonoras e partituras</value>
  </data>
  <data name="SoundtracksScores_Description" xml:space="preserve">
    <value>Música composta para mídia visual, incluindo filmes e jogos (por exemplo, trilhas sonoras de filmes, trilhas sonoras de videogames)</value>
  </data>
</root>