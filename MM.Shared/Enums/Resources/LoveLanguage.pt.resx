<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActsOfServices_Description" xml:space="preserve">
    <value>Para aqueles cuja linguagem de amor são os atos de serviço, as ações falam mais alto que as palavras. Eles se sentem cuidados quando o parceiro ajuda com tarefas ou faz algo atencioso, como preparar uma refeição, consertar algo ou fazer recados. Isso demonstra dedicação e disposição para aliviar a carga.</value>
  </data>
  <data name="ActsOfServices_Name" xml:space="preserve">
    <value>Gestos de Serviço</value>
  </data>
  <data name="PhysicalTouch_Description" xml:space="preserve">
    <value>Para pessoas cuja principal linguagem de amor é o toque físico, a proximidade e a segurança vêm por meio do contato físico. Elas se sentem mais amadas ao dar as mãos, abraçar, beijar ou fazer outros toques suaves. Não se trata de demonstrações públicas de afeto, mas sim de uma conexão física que tranquiliza e cria laços.</value>
  </data>
  <data name="PhysicalTouch_Name" xml:space="preserve">
    <value>Toque Físico</value>
  </data>
  <data name="QualityTime_Description" xml:space="preserve">
    <value>Essa linguagem do amor se concentra na atenção integral. Quem prefere tempo de qualidade quer que o parceiro esteja totalmente presente — sem celulares, sem distrações —, apenas focado em compartilhar momentos juntos. Trata-se de se sentir priorizado e verdadeiramente conectado durante esse tempo.</value>
  </data>
  <data name="QualityTime_Name" xml:space="preserve">
    <value>Qualidade de Tempo</value>
  </data>
  <data name="ReceivingGifts_Description" xml:space="preserve">
    <value>Pessoas que se identificam com essa linguagem do amor se sentem amadas quando recebem símbolos tangíveis de afeto. Não se trata de materialismo, mas da consideração por trás do presente. Um presente pequeno e significativo — como um lanche favorito depois de um dia difícil — pode fazê-las se sentirem profundamente apreciadas.</value>
  </data>
  <data name="ReceivingGifts_Name" xml:space="preserve">
    <value>Recebendo Presentes</value>
  </data>
  <data name="WordsOfAffirmation_Description" xml:space="preserve">
    <value>Essa linguagem do amor consiste em expressar afeição por meio de palavras faladas ou escritas. Pessoas que valorizam isso se sentem mais amadas quando recebem elogios sinceros, incentivo e palavras gentis. Até mesmo declarações simples como "Eu te aprecio" ou "Você fez um ótimo trabalho" têm um grande impacto.</value>
  </data>
  <data name="WordsOfAffirmation_Name" xml:space="preserve">
    <value>Palavras de Afirmação</value>
  </data>
</root>