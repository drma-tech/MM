<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnimatedAnime" xml:space="preserve">
    <value>Animação e Anime</value>
  </data>
  <data name="AnimatedAnime_Description" xml:space="preserve">
    <value>Inclui desenhos animados, séries animadas e anime japonês</value>
  </data>
  <data name="CookingFood" xml:space="preserve">
    <value>Cozinha e comida</value>
  </data>
  <data name="CookingFood_Description" xml:space="preserve">
    <value>Programas focados em culinária, panificação e cultura alimentar (por exemplo, competições de culinária, documentários sobre comida)</value>
  </data>
  <data name="DocumentaryReality" xml:space="preserve">
    <value>Documentário e Realidade</value>
  </data>
  <data name="DocumentaryReality_Description" xml:space="preserve">
    <value>Histórias e situações da vida real, informativas ou divertidas (por exemplo, documentários sobre a natureza, reality shows)</value>
  </data>
  <data name="EducationalScience" xml:space="preserve">
    <value>Educacional e Ciência</value>
  </data>
  <data name="EducationalScience_Description" xml:space="preserve">
    <value>Programas focados em tópicos de aprendizagem e ciências, geralmente informativos (por exemplo, programas de ciências, programas de instruções)</value>
  </data>
  <data name="GameShowsCompetitions" xml:space="preserve">
    <value>Game Shows e Competições</value>
  </data>
  <data name="GameShowsCompetitions_Description" xml:space="preserve">
    <value>Programas onde os concorrentes competem por prêmios ou reconhecimento (por exemplo, programas de curiosidades, competições de talentos)</value>
  </data>
  <data name="KidsFamily" xml:space="preserve">
    <value>Crianças e Família</value>
  </data>
  <data name="KidsFamily_Description" xml:space="preserve">
    <value>Programação adequada para crianças e famílias (por exemplo, programas infantis, séries para toda a família)</value>
  </data>
  <data name="LifestyleHome" xml:space="preserve">
    <value>Estilo de vida e casa</value>
  </data>
  <data name="LifestyleHome_Description" xml:space="preserve">
    <value>Programas que exploram tópicos de estilo de vida, incluindo design, viagens e bem-estar (por exemplo, melhorias residenciais, programas de viagens)</value>
  </data>
  <data name="MusicPerformances" xml:space="preserve">
    <value>Música e Performances</value>
  </data>
  <data name="MusicPerformances_Description" xml:space="preserve">
    <value>Programas centrados em música, apresentações ao vivo e videoclipes (por exemplo, contagens regressivas de música, especiais de concertos)</value>
  </data>
  <data name="NewsCurrentAffairs" xml:space="preserve">
    <value>Notícias e atualidades</value>
  </data>
  <data name="NewsCurrentAffairs_Description" xml:space="preserve">
    <value>Reportagens de notícias, talk shows e análises aprofundadas de eventos atuais</value>
  </data>
  <data name="SoapOperasDramas" xml:space="preserve">
    <value>Novelas e Dramas</value>
  </data>
  <data name="SoapOperasDramas_Description" xml:space="preserve">
    <value>Dramas serializados com histórias contínuas, muitas vezes emocionalmente intensos (por exemplo, novelas diurnas, dramas familiares)</value>
  </data>
  <data name="SportsOutdoors" xml:space="preserve">
    <value>Esportes e atividades ao ar livre</value>
  </data>
  <data name="SportsOutdoors_Description" xml:space="preserve">
    <value>Programas com foco em eventos esportivos, comentários e atividades ao ar livre (por exemplo, esportes ao vivo, esportes radicais)</value>
  </data>
  <data name="TalkShowsInterviews" xml:space="preserve">
    <value>Talk Shows e Entrevistas</value>
  </data>
  <data name="TalkShowsInterviews_Description" xml:space="preserve">
    <value>Programas com apresentadores conversando com convidados sobre vários tópicos (por exemplo, entrevistas com celebridades, painéis de discussão)</value>
  </data>
  <data name="VarietyComedy" xml:space="preserve">
    <value>Variedade e Comédia</value>
  </data>
  <data name="VarietyComedy_Description" xml:space="preserve">
    <value>Programas com uma mistura de elementos de entretenimento, como esquetes, stand-up e atos de comédia (por exemplo, programas noturnos, esquetes de comédia)</value>
  </data>
</root>